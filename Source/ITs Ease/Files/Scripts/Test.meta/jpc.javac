class Test extends Component {
   /* @Author Dhanu */ //[I-S]LN=0;[I-E]
   public float time, duration, b; //[I-S]LN=1;[I-E]
   public Vector3 start = new Vector3(), end = new Vector3(); //[I-S]LN=2;[I-E]
   public Text3D text; //[I-S]LN=3;[I-E]
    //[I-S]LN=4;[I-E]
   /// Run only once //[I-S]LN=5;[I-E]
   void start() {} //[I-S]LN=6;[I-E]
    //[I-S]LN=7;[I-E]
   /// Repeat every frame //[I-S]LN=8;[I-E]
   void repeat() { //[I-S]LN=9;[I-E]
     if (time < duration) { //[I-S]LN=10;[I-E]
       time += Math.bySecond(); //[I-S]LN=11;[I-E]
     }  //[I-S]LN=12;[I-E]
    //[I-S]LN=13;[I-E]
     float t = Mathf.normalize(time / (duration), 0f, 1f); //[I-S]LN=14;[I-E]
    //[I-S]LN=15;[I-E]
     // myTransform.getPosition().setX(lerp(start.getX(), end.getX(), t)); //[I-S]LN=16;[I-E]
     // myTransform.getPosition().setY(lerp(start.getY(), end.getY(), t)); //[I-S]LN=17;[I-E]
     // myTransform.getPosition().setZ(lerp(start.getZ(), end.getZ(), t)); //[I-S]LN=18;[I-E]
     myTransform.getPosition().setX(Easer.easeOutCirc(start.getX(), end.getX(),t)); //[I-S]LN=19;[I-E]
    //[I-S]LN=20;[I-E]
     text.setText(new String().format("%.2f", time)); //[I-S]LN=21;[I-E]
   } //[I-S]LN=22;[I-E]
    //[I-S]LN=23;[I-E]
   public static float lerp(float start, float end, float t) { //[I-S]LN=24;[I-E]
     if (t < 0f) t = 0f; //[I-S]LN=25;[I-E]
     if (t > 1f) t = 1f; //[I-S]LN=26;[I-E]
     return start + (end - start) * t; //[I-S]LN=27;[I-E]
   } //[I-S]LN=28;[I-E]
}