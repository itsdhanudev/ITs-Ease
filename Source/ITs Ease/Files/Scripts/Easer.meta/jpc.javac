final class Easer { //[I-S]LN=0;[I-E]
  private Easer() {} //[I-S]LN=1;[I-E]
 //[I-S]LN=2;[I-E]
  private static float clamp01(float t) { //[I-S]LN=3;[I-E]
    if (t <= 0.0f) return 0.0f; //[I-S]LN=4;[I-E]
    if (t >= 1.0f) return 1.0f; //[I-S]LN=5;[I-E]
    return t; //[I-S]LN=6;[I-E]
  } //[I-S]LN=7;[I-E]
 //[I-S]LN=8;[I-E]
  public static float linear(float start, float end, float t) { //[I-S]LN=9;[I-E]
    return start + (end - start) * t; //[I-S]LN=10;[I-E]
  } //[I-S]LN=11;[I-E]
 //[I-S]LN=12;[I-E]
  public static float easeInQuad(float start, float end, float t) { //[I-S]LN=13;[I-E]
    return start + (end - start) * (t * t); //[I-S]LN=14;[I-E]
  } //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
  public static float easeOutQuad(float start, float end, float t) { //[I-S]LN=17;[I-E]
    return start - (end - start) * (t * (t - 2.0f)); //[I-S]LN=18;[I-E]
  } //[I-S]LN=19;[I-E]
 //[I-S]LN=20;[I-E]
  public static float easeInOutQuad(float start, float end, float t) { //[I-S]LN=21;[I-E]
    t *= 2.0f; //[I-S]LN=22;[I-E]
    if (t < 1.0f) return start + (end - start) / 2.0f * (t * t); //[I-S]LN=23;[I-E]
    t -= 1.0f; //[I-S]LN=24;[I-E]
    return start - (end - start) / 2.0f * (t * (t - 2.0f) - 1.0f); //[I-S]LN=25;[I-E]
  } //[I-S]LN=26;[I-E]
 //[I-S]LN=27;[I-E]
  public static float easeInCubic(float start, float end, float t) { //[I-S]LN=28;[I-E]
    return start + (end - start) * (t * t * t); //[I-S]LN=29;[I-E]
  } //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
  public static float easeOutCubic(float start, float end, float t) { //[I-S]LN=32;[I-E]
    t -= 1.0f; //[I-S]LN=33;[I-E]
    return start + (end - start) * (t * t * t + 1.0f); //[I-S]LN=34;[I-E]
  } //[I-S]LN=35;[I-E]
 //[I-S]LN=36;[I-E]
  public static float easeInOutCubic(float start, float end, float t) { //[I-S]LN=37;[I-E]
    t *= 2.0f; //[I-S]LN=38;[I-E]
    if (t < 1.0f) return start + (end - start) / 2.0f * (t * t * t); //[I-S]LN=39;[I-E]
    t -= 2.0f; //[I-S]LN=40;[I-E]
    return start + (end - start) / 2.0f * (t * t * t + 2.0f); //[I-S]LN=41;[I-E]
  } //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
  public static float easeInQuart(float start, float end, float t) { //[I-S]LN=44;[I-E]
    return start + (end - start) * (t * t * t * t); //[I-S]LN=45;[I-E]
  } //[I-S]LN=46;[I-E]
 //[I-S]LN=47;[I-E]
  public static float easeOutQuart(float start, float end, float t) { //[I-S]LN=48;[I-E]
    t -= 1.0f; //[I-S]LN=49;[I-E]
    return start - (end - start) * (t * t * t * t - 1.0f); //[I-S]LN=50;[I-E]
  } //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
  public static float easeInOutQuart(float start, float end, float t) { //[I-S]LN=53;[I-E]
    t *= 2.0f; //[I-S]LN=54;[I-E]
    if (t < 1.0f) return start + (end - start) / 2.0f * (t * t * t * t); //[I-S]LN=55;[I-E]
    t -= 2.0f; //[I-S]LN=56;[I-E]
    return start - (end - start) / 2.0f * (t * t * t * t - 2.0f); //[I-S]LN=57;[I-E]
  } //[I-S]LN=58;[I-E]
 //[I-S]LN=59;[I-E]
  public static float easeInQuint(float start, float end, float t) { //[I-S]LN=60;[I-E]
    return start + (end - start) * (t * t * t * t * t); //[I-S]LN=61;[I-E]
  } //[I-S]LN=62;[I-E]
 //[I-S]LN=63;[I-E]
  public static float easeOutQuint(float start, float end, float t) { //[I-S]LN=64;[I-E]
    t -= 1.0f; //[I-S]LN=65;[I-E]
    return start + (end - start) * (t * t * t * t * t + 1.0f); //[I-S]LN=66;[I-E]
  } //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
  public static float easeInOutQuint(float start, float end, float t) { //[I-S]LN=69;[I-E]
    t *= 2.0f; //[I-S]LN=70;[I-E]
    if (t < 1.0f) return start + (end - start) / 2.0f * (t * t * t * t * t); //[I-S]LN=71;[I-E]
    t -= 2.0f; //[I-S]LN=72;[I-E]
    return start + (end - start) / 2.0f * (t * t * t * t * t + 2.0f); //[I-S]LN=73;[I-E]
  } //[I-S]LN=74;[I-E]
 //[I-S]LN=75;[I-E]
  public static float easeInSine(float start, float end, float t) { //[I-S]LN=76;[I-E]
    return start - (end - start) * (float) Math.cos(t * Math.PI / 2.0f) + (end - start); //[I-S]LN=77;[I-E]
  } //[I-S]LN=78;[I-E]
 //[I-S]LN=79;[I-E]
  public static float easeOutSine(float start, float end, float t) { //[I-S]LN=80;[I-E]
    return start + (end - start) * (float) Math.sin(t * Math.PI / 2.0f); //[I-S]LN=81;[I-E]
  } //[I-S]LN=82;[I-E]
 //[I-S]LN=83;[I-E]
  public static float easeInOutSine(float start, float end, float t) { //[I-S]LN=84;[I-E]
    return start - (end - start) / 2.0f * ((float) Math.cos(Math.PI * t) - 1.0f); //[I-S]LN=85;[I-E]
  } //[I-S]LN=86;[I-E]
 //[I-S]LN=87;[I-E]
  public static float easeInExpo(float start, float end, float t) { //[I-S]LN=88;[I-E]
    if (t == 0.0f) return start; //[I-S]LN=89;[I-E]
    return start + (end - start) * (float) Math.pow(2.0f, 10.0f * (t - 1.0f)); //[I-S]LN=90;[I-E]
  } //[I-S]LN=91;[I-E]
 //[I-S]LN=92;[I-E]
  public static float easeOutExpo(float start, float end, float t) { //[I-S]LN=93;[I-E]
    if (t == 1.0f) return end; //[I-S]LN=94;[I-E]
    return start + (end - start) * (-(float) Math.pow(2.0f, -10.0f * t) + 1.0f); //[I-S]LN=95;[I-E]
  } //[I-S]LN=96;[I-E]
 //[I-S]LN=97;[I-E]
  public static float easeInOutExpo(float start, float end, float t) { //[I-S]LN=98;[I-E]
    if (t == 0.0f) return start; //[I-S]LN=99;[I-E]
    if (t == 1.0f) return end; //[I-S]LN=100;[I-E]
    t *= 2.0f; //[I-S]LN=101;[I-E]
    if (t < 1.0f) return start + (end - start) / 2.0f * (float) Math.pow(2.0f, 10.0f * (t - 1.0f)); //[I-S]LN=102;[I-E]
    t -= 1.0f; //[I-S]LN=103;[I-E]
    return start + (end - start) / 2.0f * (-(float) Math.pow(2.0f, -10.0f * t) + 2.0f); //[I-S]LN=104;[I-E]
  } //[I-S]LN=105;[I-E]
 //[I-S]LN=106;[I-E]
  public static float easeInCirc(float start, float end, float t) { //[I-S]LN=107;[I-E]
    return start - (end - start) * ((float) Math.sqrt(1.0f - t * t) - 1.0f); //[I-S]LN=108;[I-E]
  } //[I-S]LN=109;[I-E]
 //[I-S]LN=110;[I-E]
  public static float easeOutCirc(float start, float end, float t) { //[I-S]LN=111;[I-E]
    t -= 1.0f; //[I-S]LN=112;[I-E]
    return start + (end - start) * (float) Math.sqrt(1.0f - t * t); //[I-S]LN=113;[I-E]
  } //[I-S]LN=114;[I-E]
 //[I-S]LN=115;[I-E]
  public static float easeInOutCirc(float start, float end, float t) { //[I-S]LN=116;[I-E]
    t *= 2.0f; //[I-S]LN=117;[I-E]
    if (t < 1.0f) return start - (end - start) / 2.0f * ((float) Math.sqrt(1.0f - t * t) - 1.0f); //[I-S]LN=118;[I-E]
    t -= 2.0f; //[I-S]LN=119;[I-E]
    return start + (end - start) / 2.0f * ((float) Math.sqrt(1.0f - t * t) + 1.0f); //[I-S]LN=120;[I-E]
  } //[I-S]LN=121;[I-E]
 //[I-S]LN=122;[I-E]
  public static float easeInBack(float start, float end, float t) { //[I-S]LN=123;[I-E]
    float s = 1.70158f; //[I-S]LN=124;[I-E]
    return start + (end - start) * (t * t * ((s + 1.0f) * t - s)); //[I-S]LN=125;[I-E]
  } //[I-S]LN=126;[I-E]
 //[I-S]LN=127;[I-E]
  public static float easeOutBack(float start, float end, float t) { //[I-S]LN=128;[I-E]
    float s = 1.70158f; //[I-S]LN=129;[I-E]
    t -= 1.0f; //[I-S]LN=130;[I-E]
    return start + (end - start) * (t * t * ((s + 1.0f) * t + s) + 1.0f); //[I-S]LN=131;[I-E]
  } //[I-S]LN=132;[I-E]
 //[I-S]LN=133;[I-E]
  public static float easeInOutBack(float start, float end, float t) { //[I-S]LN=134;[I-E]
    float s = 1.70158f * 1.525f; //[I-S]LN=135;[I-E]
    t *= 2.0f; //[I-S]LN=136;[I-E]
    if (t < 1.0f) return start + (end - start) / 2.0f * (t * t * ((s + 1.0f) * t - s)); //[I-S]LN=137;[I-E]
    t -= 2.0f; //[I-S]LN=138;[I-E]
    return start + (end - start) / 2.0f * (t * t * ((s + 1.0f) * t + s) + 2.0f); //[I-S]LN=139;[I-E]
  } //[I-S]LN=140;[I-E]
 //[I-S]LN=141;[I-E]
  public static float easeOutBounce(float start, float end, float t) { //[I-S]LN=142;[I-E]
    float n1 = 7.5625f; //[I-S]LN=143;[I-E]
    float d1 = 2.75f; //[I-S]LN=144;[I-E]
    float diff = (end - start); //[I-S]LN=145;[I-E]
    if (t < 1.0f / d1) { //[I-S]LN=146;[I-E]
      return start + diff * (n1 * t * t); //[I-S]LN=147;[I-E]
    } else if (t < 2.0f / d1) { //[I-S]LN=148;[I-E]
      t -= 1.5f / d1; //[I-S]LN=149;[I-E]
      return start + diff * (n1 * t * t + 0.75f); //[I-S]LN=150;[I-E]
    } else if (t < 2.5f / d1) { //[I-S]LN=151;[I-E]
      t -= 2.25f / d1; //[I-S]LN=152;[I-E]
      return start + diff * (n1 * t * t + 0.9375f); //[I-S]LN=153;[I-E]
    } else { //[I-S]LN=154;[I-E]
      t -= 2.625f / d1; //[I-S]LN=155;[I-E]
      return start + diff * (n1 * t * t + 0.984375f); //[I-S]LN=156;[I-E]
    } //[I-S]LN=157;[I-E]
  } //[I-S]LN=158;[I-E]
 //[I-S]LN=159;[I-E]
  public static float easeInBounce(float start, float end, float t) { //[I-S]LN=160;[I-E]
    float inv = easeOutBounce(0.0f, 1.0f, 1.0f - t); //[I-S]LN=161;[I-E]
    return start + (end - start) * (1.0f - inv); //[I-S]LN=162;[I-E]
  } //[I-S]LN=163;[I-E]
 //[I-S]LN=164;[I-E]
  public static float easeInOutBounce(float start, float end, float t) { //[I-S]LN=165;[I-E]
    if (t < 0.5f) return start + (end - start) * 0.5f * (1.0f - easeOutBounce(0.0f, 1.0f, 1.0f - (t * 2.0f))); //[I-S]LN=166;[I-E]
    else return start + (end - start) * (0.5f * easeOutBounce(0.0f, 1.0f, (t * 2.0f - 1.0f)) + 0.5f); //[I-S]LN=167;[I-E]
  } //[I-S]LN=168;[I-E]
 //[I-S]LN=169;[I-E]
  public static float easeInElastic(float start, float end, float t) { //[I-S]LN=170;[I-E]
    if (t == 0.0f) return start; //[I-S]LN=171;[I-E]
    if (t == 1.0f) return end; //[I-S]LN=172;[I-E]
    float p = 0.3f; //[I-S]LN=173;[I-E]
    float s = p / 4.0f; //[I-S]LN=174;[I-E]
    t -= 1.0f; //[I-S]LN=175;[I-E]
    return start + -(end - start) * (float) Math.pow(2.0f, 10.0f * t) * (float) Math.sin((t - s) * (2.0f * Math.PI) / p); //[I-S]LN=176;[I-E]
  } //[I-S]LN=177;[I-E]
 //[I-S]LN=178;[I-E]
  public static float easeOutElastic(float start, float end, float t) { //[I-S]LN=179;[I-E]
    if (t == 0.0f) return start; //[I-S]LN=180;[I-E]
    if (t == 1.0f) return end; //[I-S]LN=181;[I-E]
    float p = 0.3f; //[I-S]LN=182;[I-E]
    float s = p / 4.0f; //[I-S]LN=183;[I-E]
    return start + (end - start) * ((float) Math.pow(2.0f, -10.0f * t) * (float) Math.sin((t - s) * (2.0f * Math.PI) / p) + 1.0f); //[I-S]LN=184;[I-E]
  } //[I-S]LN=185;[I-E]
 //[I-S]LN=186;[I-E]
  public static float easeInOutElastic(float start, float end, float t) { //[I-S]LN=187;[I-E]
    if (t == 0.0f) return start; //[I-S]LN=188;[I-E]
    if (t == 1.0f) return end; //[I-S]LN=189;[I-E]
    float p = 0.45f; //[I-S]LN=190;[I-E]
    float s = p / 4.0f; //[I-S]LN=191;[I-E]
    t *= 2.0f; //[I-S]LN=192;[I-E]
    if (t < 1.0f) { //[I-S]LN=193;[I-E]
      t -= 1.0f; //[I-S]LN=194;[I-E]
      return start + -(end - start) / 2.0f * (float) Math.pow(2.0f, 10.0f * t) * (float) Math.sin((t - s) * (2.0f * Math.PI) / p); //[I-S]LN=195;[I-E]
    } else { //[I-S]LN=196;[I-E]
      t -= 1.0f; //[I-S]LN=197;[I-E]
      return start + (end - start) / 2.0f * ((float) Math.pow(2.0f, -10.0f * t) * (float) Math.sin((t - s) * (2.0f * Math.PI) / p) + 1.0f); //[I-S]LN=198;[I-E]
    } //[I-S]LN=199;[I-E]
  } //[I-S]LN=200;[I-E]
 //[I-S]LN=201;[I-E]
  public static float smoothStep(float start, float end, float t) { //[I-S]LN=202;[I-E]
    t = clamp01(t); //[I-S]LN=203;[I-E]
    return start + (end - start) * (t * t * (3.0f - 2.0f * t)); //[I-S]LN=204;[I-E]
  } //[I-S]LN=205;[I-E]
 //[I-S]LN=206;[I-E]
  public static float smootherStep(float start, float end, float t) { //[I-S]LN=207;[I-E]
    t = clamp01(t); //[I-S]LN=208;[I-E]
    return start + (end - start) * (t * t * t * (t * (6.0f * t - 15.0f) + 10.0f)); //[I-S]LN=209;[I-E]
  } //[I-S]LN=210;[I-E]
 //[I-S]LN=211;[I-E]
  public static float step(float start, float end, float t, int steps) { //[I-S]LN=212;[I-E]
    if (steps <= 1) return (t < 0.5f ? start : end); //[I-S]LN=213;[I-E]
    t = clamp01(t); //[I-S]LN=214;[I-E]
    float stepT = (float) Math.floor(t * steps) / (float) steps; //[I-S]LN=215;[I-E]
    return start + (end - start) * stepT; //[I-S]LN=216;[I-E]
  } //[I-S]LN=217;[I-E]
 //[I-S]LN=218;[I-E]
  public static float easeInPower(float start, float end, float t, int n) { //[I-S]LN=219;[I-E]
    if (n <= 1) return linear(start, end, t); //[I-S]LN=220;[I-E]
    return start + (end - start) * (float) Math.pow(t, n); //[I-S]LN=221;[I-E]
  } //[I-S]LN=222;[I-E]
 //[I-S]LN=223;[I-E]
  public static float easeOutPower(float start, float end, float t, int n) { //[I-S]LN=224;[I-E]
    if (n <= 1) return linear(start, end, t); //[I-S]LN=225;[I-E]
    return start + (end - start) * (1.0f - (float) Math.pow(1.0f - t, n)); //[I-S]LN=226;[I-E]
  } //[I-S]LN=227;[I-E]
 //[I-S]LN=228;[I-E]
  public static float easeInOutPower(float start, float end, float t, int n) { //[I-S]LN=229;[I-E]
    if (n <= 1) return linear(start, end, t); //[I-S]LN=230;[I-E]
    t *= 2.0f; //[I-S]LN=231;[I-E]
    if (t < 1.0f) return start + (end - start) / 2.0f * (float) Math.pow(t, n); //[I-S]LN=232;[I-E]
    t -= 1.0f; //[I-S]LN=233;[I-E]
    return start + (end - start) / 2.0f * (1.0f - (float) Math.pow(1.0f - t, n) + 1.0f); //[I-S]LN=234;[I-E]
  } //[I-S]LN=235;[I-E]
 //[I-S]LN=236;[I-E]
  public static float cubicBezier(float start, float end, float t, float x1, float y1, float x2, float y2) { //[I-S]LN=237;[I-E]
    t = clamp01(t); //[I-S]LN=238;[I-E]
    float diff = end - start; //[I-S]LN=239;[I-E]
    if (x1 == y1 && x2 == y2 && x1 == x2) { //[I-S]LN=240;[I-E]
      return start + diff * t; //[I-S]LN=241;[I-E]
    } //[I-S]LN=242;[I-E]
    float lower = 0.0f; //[I-S]LN=243;[I-E]
    float upper = 1.0f; //[I-S]LN=244;[I-E]
    float u = t; //[I-S]LN=245;[I-E]
    for (int i = 0; i < 24; i++) { //[I-S]LN=246;[I-E]
      u = (lower + upper) * 0.5f; //[I-S]LN=247;[I-E]
      float xAtU = cubicBezierSample(u, x1, x2); //[I-S]LN=248;[I-E]
      if (xAtU > t) upper = u; //[I-S]LN=249;[I-E]
      else lower = u; //[I-S]LN=250;[I-E]
    } //[I-S]LN=251;[I-E]
    float yAtU = cubicBezierSample(u, y1, y2); //[I-S]LN=252;[I-E]
    return start + diff * yAtU; //[I-S]LN=253;[I-E]
  } //[I-S]LN=254;[I-E]
 //[I-S]LN=255;[I-E]
  private static float cubicBezierSample(float u, float c1, float c2) { //[I-S]LN=256;[I-E]
    float inv = 1.0f - u; //[I-S]LN=257;[I-E]
    float a = 3.0f * inv * inv * u * c1; //[I-S]LN=258;[I-E]
    float b = 3.0f * inv * u * u * c2; //[I-S]LN=259;[I-E]
    float c = u * u * u; //[I-S]LN=260;[I-E]
    return a + b + c; //[I-S]LN=261;[I-E]
  } //[I-S]LN=262;[I-E]
 //[I-S]LN=263;[I-E]
  private static float deterministicNoise(int i) { //[I-S]LN=264;[I-E]
    float x = Math.sin((float) i * 127.1f) * 43758.5453f; //[I-S]LN=265;[I-E]
    float frac = x - Math.floor(x); //[I-S]LN=266;[I-E]
    return (float) frac; //[I-S]LN=267;[I-E]
  } //[I-S]LN=268;[I-E]
 //[I-S]LN=269;[I-E]
  public static interface EaseFunction { //[I-S]LN=270;[I-E]
    float ease(float start, float end, float t); //[I-S]LN=271;[I-E]
  } //[I-S]LN=272;[I-E]
}  //[I-S]LN=273;[I-E]