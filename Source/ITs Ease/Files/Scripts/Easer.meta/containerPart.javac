package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:Easer
final class Easer { //[I-S]LN=0;[I-E]
  private Easer() {} //[I-S]LN=1;[I-E]
 //[I-S]LN=2;[I-E]
  public static float ease(float start, float end, float t, EasingTypes type) { //[I-S]LN=3;[I-E]
    switch (type) { //[I-S]LN=4;[I-E]
      case Linear: //[I-S]LN=5;[I-E]
        return EasingFunctions.linear(start, end, t); //[I-S]LN=6;[I-E]
      case EaseInQuad: //[I-S]LN=7;[I-E]
        return EasingFunctions.easeInQuad(start, end, t); //[I-S]LN=8;[I-E]
      case EaseOutQuad: //[I-S]LN=9;[I-E]
        return EasingFunctions.easeOutQuad(start, end, t); //[I-S]LN=10;[I-E]
      case EaseInOutQuad: //[I-S]LN=11;[I-E]
        return EasingFunctions.easeInOutQuad(start, end, t); //[I-S]LN=12;[I-E]
      case EaseInCubic: //[I-S]LN=13;[I-E]
        return EasingFunctions.easeInCubic(start, end, t); //[I-S]LN=14;[I-E]
      case EaseOutCubic: //[I-S]LN=15;[I-E]
        return EasingFunctions.easeOutCubic(start, end, t); //[I-S]LN=16;[I-E]
      case EaseInOutCubic: //[I-S]LN=17;[I-E]
        return EasingFunctions.easeInOutCubic(start, end, t); //[I-S]LN=18;[I-E]
      case EaseInQuart: //[I-S]LN=19;[I-E]
        return EasingFunctions.easeInQuart(start, end, t); //[I-S]LN=20;[I-E]
      case EaseOutQuart: //[I-S]LN=21;[I-E]
        return EasingFunctions.easeOutQuart(start, end, t); //[I-S]LN=22;[I-E]
      case EaseInOutQuart: //[I-S]LN=23;[I-E]
        return EasingFunctions.easeInOutQuart(start, end, t); //[I-S]LN=24;[I-E]
      case EaseInQuint: //[I-S]LN=25;[I-E]
        return EasingFunctions.easeInQuint(start, end, t); //[I-S]LN=26;[I-E]
      case EaseOutQuint: //[I-S]LN=27;[I-E]
        return EasingFunctions.easeOutQuint(start, end, t); //[I-S]LN=28;[I-E]
      case EaseInOutQuint: //[I-S]LN=29;[I-E]
        return EasingFunctions.easeInOutQuint(start, end, t); //[I-S]LN=30;[I-E]
      case EaseInSine: //[I-S]LN=31;[I-E]
        return EasingFunctions.easeInSine(start, end, t); //[I-S]LN=32;[I-E]
      case EaseOutSine: //[I-S]LN=33;[I-E]
        return EasingFunctions.easeOutSine(start, end, t); //[I-S]LN=34;[I-E]
      case EaseInOutSine: //[I-S]LN=35;[I-E]
        return EasingFunctions.easeInOutSine(start, end, t); //[I-S]LN=36;[I-E]
      case EaseInExpo: //[I-S]LN=37;[I-E]
        return EasingFunctions.easeInExpo(start, end, t); //[I-S]LN=38;[I-E]
      case EaseOutExpo: //[I-S]LN=39;[I-E]
        return EasingFunctions.easeOutExpo(start, end, t); //[I-S]LN=40;[I-E]
      case EaseInOutExpo: //[I-S]LN=41;[I-E]
        return EasingFunctions.easeInOutExpo(start, end, t); //[I-S]LN=42;[I-E]
      case EaseInCirc: //[I-S]LN=43;[I-E]
        return EasingFunctions.easeInCirc(start, end, t); //[I-S]LN=44;[I-E]
      case EaseOutCirc: //[I-S]LN=45;[I-E]
        return EasingFunctions.easeOutCirc(start, end, t); //[I-S]LN=46;[I-E]
      case EaseInOutCirc: //[I-S]LN=47;[I-E]
        return EasingFunctions.easeInOutCirc(start, end, t); //[I-S]LN=48;[I-E]
      case EaseInBack: //[I-S]LN=49;[I-E]
        return EasingFunctions.easeInBack(start, end, t); //[I-S]LN=50;[I-E]
      case EaseOutBack: //[I-S]LN=51;[I-E]
        return EasingFunctions.easeOutBack(start, end, t); //[I-S]LN=52;[I-E]
      case EaseInOutBack: //[I-S]LN=53;[I-E]
        return EasingFunctions.easeInOutBack(start, end, t); //[I-S]LN=54;[I-E]
      case EaseOutBounce: //[I-S]LN=55;[I-E]
        return EasingFunctions.easeOutBounce(start, end, t); //[I-S]LN=56;[I-E]
      case EaseInBounce: //[I-S]LN=57;[I-E]
        return EasingFunctions.easeInBounce(start, end, t); //[I-S]LN=58;[I-E]
      case EaseInOutBounce: //[I-S]LN=59;[I-E]
        return EasingFunctions.easeInOutBounce(start, end, t); //[I-S]LN=60;[I-E]
      case EaseInElastic: //[I-S]LN=61;[I-E]
        return EasingFunctions.easeInElastic(start, end, t); //[I-S]LN=62;[I-E]
      case EaseOutElastic: //[I-S]LN=63;[I-E]
        return EasingFunctions.easeOutElastic(start, end, t); //[I-S]LN=64;[I-E]
      case EaseInOutElastic: //[I-S]LN=65;[I-E]
        return EasingFunctions.easeInOutElastic(start, end, t); //[I-S]LN=66;[I-E]
      case SmoothStep: //[I-S]LN=67;[I-E]
        return EasingFunctions.smoothStep(start, end, t); //[I-S]LN=68;[I-E]
      case SmootherStep: //[I-S]LN=69;[I-E]
        return EasingFunctions.smootherStep(start, end, t); //[I-S]LN=70;[I-E]
      default: //[I-S]LN=71;[I-E]
        return start; // fallback //[I-S]LN=72;[I-E]
    } //[I-S]LN=73;[I-E]
  }  //[I-S]LN=74;[I-E]
} //[I-S]LN=75;[I-E]
//C-R:Test
class Test extends Component {
   /* @Author Dhanu */ //[I-S]LN=0;[I-E]
   public float time, duration, b; //[I-S]LN=1;[I-E]
   public Vector3 start = new Vector3(), end = new Vector3(); //[I-S]LN=2;[I-E]
   public Text3D text; //[I-S]LN=3;[I-E]
   public EasingTypes type; //[I-S]LN=4;[I-E]
   /// Run only once //[I-S]LN=5;[I-E]
public    void start() {} //[I-S]LN=6;[I-E]
    //[I-S]LN=7;[I-E]
   /// Repeat every frame //[I-S]LN=8;[I-E]
public    void repeat() { //[I-S]LN=9;[I-E]
     if (time < duration) { //[I-S]LN=10;[I-E]
       time += Math.bySecond(); //[I-S]LN=11;[I-E]
     }  //[I-S]LN=12;[I-E]
    //[I-S]LN=13;[I-E]
     float t = Mathf.normalize(time / (duration), 0f, 1f); //[I-S]LN=14;[I-E]
    //[I-S]LN=15;[I-E]
     // myTransform.getPosition().setX(lerp(start.getX(), end.getX(), t)); //[I-S]LN=16;[I-E]
     // myTransform.getPosition().setY(lerp(start.getY(), end.getY(), t)); //[I-S]LN=17;[I-E]
     // myTransform.getPosition().setZ(lerp(start.getZ(), end.getZ(), t)); //[I-S]LN=18;[I-E]
     myTransform.getPosition().setX(Easer.ease(start.getX(), end.getX(),t,type)); //[I-S]LN=19;[I-E]
    //[I-S]LN=20;[I-E]
     text.setText(new String().format("%.2f", time)); //[I-S]LN=21;[I-E]
   } //[I-S]LN=22;[I-E]
    //[I-S]LN=23;[I-E]
   public static float lerp(float start, float end, float t) { //[I-S]LN=24;[I-E]
     if (t < 0f) t = 0f; //[I-S]LN=25;[I-E]
     if (t > 1f) t = 1f; //[I-S]LN=26;[I-E]
     return start + (end - start) * t; //[I-S]LN=27;[I-E]
   } //[I-S]LN=28;[I-E]
}