package JAVARuntime;

import java.util.*; //[I-S]LN=2;[I-E]
import java.text.*; //[I-S]LN=3;[I-E]
import java.net.*; //[I-S]LN=4;[I-E]
import java.math.*; //[I-S]LN=5;[I-E]
import java.io.*; //[I-S]LN=6;[I-E]
import java.nio.*; //[I-S]LN=7;[I-E]
import java.nio.*; //[I-S]LN=8;[I-E]
import java.util.HashMap; //[I-S]LN=9;[I-E]
import java.util.Map; //[I-S]LN=10;[I-E]
import java.lang.reflect.Field; //[I-S]LN=12;[I-E]
import java.lang.reflect.Method; //[I-S]LN=13;[I-E]
import java.lang.reflect.Modifier; //[I-S]LN=14;[I-E]
import java.util.ArrayList; //[I-S]LN=16;[I-E]
import java.util.List; //[I-S]LN=17;[I-E]
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:Test

 //[I-S]LN=1;[I-E]
 //[I-S]LN=11;[I-E]
 //[I-S]LN=15;[I-E]
 //[I-S]LN=18;[I-E]
/* @Author Dhanu */ //[I-S]LN=19;[I-E]
class Test extends Component { //[I-S]LN=20;[I-E]
  /// Run only once //[I-S]LN=21;[I-E]
  void start() { //[I-S]LN=22;[I-E]
    // ArrayList<String> arry = (ArrayList<String>) findSub("JAVARuntime.SpatialObject"); //[I-S]LN=23;[I-E]
    // for (int i = 0; i < arry.size(); i++) { //[I-S]LN=24;[I-E]
    //  Console.log(arry.get(i)); //[I-S]LN=25;[I-E]
    // } //[I-S]LN=26;[I-E]
    Console.log(findSub("JAVARuntime.Vector3")); //[I-S]LN=27;[I-E]
  } //[I-S]LN=28;[I-E]
 //[I-S]LN=29;[I-E]
  /// Repeat every frame //[I-S]LN=30;[I-E]
  void repeat() {} //[I-S]LN=31;[I-E]
 //[I-S]LN=32;[I-E]
  public static String findSub(String className) { //[I-S]LN=33;[I-E]
    StringBuilder sb = new StringBuilder(); //[I-S]LN=34;[I-E]
 //[I-S]LN=35;[I-E]
    try { //[I-S]LN=36;[I-E]
      Class<?> cls = Class.forName(className); //[I-S]LN=37;[I-E]
 //[I-S]LN=38;[I-E]
      sb.append("Class: ").append(cls.getName()).append("\n\n"); //[I-S]LN=39;[I-E]
 //[I-S]LN=40;[I-E]
      // Fields including inherited //[I-S]LN=41;[I-E]
      sb.append("FIELDS:\n"); //[I-S]LN=42;[I-E]
      Field[] fields = getAllFields(cls); //[I-S]LN=43;[I-E]
      for (int i = 0; i < fields.length; i++) { //[I-S]LN=44;[I-E]
        Field f = fields[i]; //[I-S]LN=45;[I-E]
        sb.append(Modifier.toString(f.getModifiers())).append(" ").append(getSimpleClassName(f.getType().getName())).append(" ").append(f.getName()).append("\n"); //[I-S]LN=46;[I-E]
      } //[I-S]LN=47;[I-E]
 //[I-S]LN=48;[I-E]
      // Methods including inherited //[I-S]LN=49;[I-E]
      sb.append("\nMETHODS:\n"); //[I-S]LN=50;[I-E]
      Method[] methods = getAllMethods(cls); //[I-S]LN=51;[I-E]
      for (int i = 0; i < methods.length; i++) { //[I-S]LN=52;[I-E]
        Method m = methods[i]; //[I-S]LN=53;[I-E]
        sb.append(Modifier.toString(m.getModifiers())).append(" ").append(getSimpleClassName(m.getReturnType().getName())).append(" ").append(m.getName()).append("("); //[I-S]LN=54;[I-E]
 //[I-S]LN=55;[I-E]
        Class[] params = m.getParameterTypes(); //[I-S]LN=56;[I-E]
        for (int j = 0; j < params.length; j++) { //[I-S]LN=57;[I-E]
          sb.append(getSimpleClassName(params[j].getName())); //[I-S]LN=58;[I-E]
          if (j < params.length - 1) sb.append(","); //[I-S]LN=59;[I-E]
        } //[I-S]LN=60;[I-E]
        sb.append(")"); //[I-S]LN=61;[I-E]
 //[I-S]LN=62;[I-E]
        Class[] exceptions = m.getExceptionTypes(); //[I-S]LN=63;[I-E]
        if (exceptions.length > 0) { //[I-S]LN=64;[I-E]
          sb.append(" throws "); //[I-S]LN=65;[I-E]
          for (int j = 0; j < exceptions.length; j++) { //[I-S]LN=66;[I-E]
            sb.append(getSimpleClassName(exceptions[j].getName())); //[I-S]LN=67;[I-E]
            if (j < exceptions.length - 1) sb.append(","); //[I-S]LN=68;[I-E]
          } //[I-S]LN=69;[I-E]
        } //[I-S]LN=70;[I-E]
 //[I-S]LN=71;[I-E]
        sb.append("\n"); //[I-S]LN=72;[I-E]
      } //[I-S]LN=73;[I-E]
 //[I-S]LN=74;[I-E]
    } catch (Exception e) { //[I-S]LN=75;[I-E]
      return "Class not found: " + className; //[I-S]LN=76;[I-E]
    } //[I-S]LN=77;[I-E]
 //[I-S]LN=78;[I-E]
    return sb.toString().trim(); //[I-S]LN=79;[I-E]
  } //[I-S]LN=80;[I-E]
 //[I-S]LN=81;[I-E]
  // Helper to get simple class name from fully qualified name //[I-S]LN=82;[I-E]
  private static String getSimpleClassName(String fullName) { //[I-S]LN=83;[I-E]
    int lastDot = fullName.lastIndexOf('.'); //[I-S]LN=84;[I-E]
    if (lastDot >= 0) { //[I-S]LN=85;[I-E]
      return fullName.substring(lastDot + 1); //[I-S]LN=86;[I-E]
    } //[I-S]LN=87;[I-E]
    return fullName; //[I-S]LN=88;[I-E]
  } //[I-S]LN=89;[I-E]
 //[I-S]LN=90;[I-E]
  // Get all fields including inherited (manual array copy) //[I-S]LN=91;[I-E]
  private static Field[] getAllFields(Class cls) { //[I-S]LN=92;[I-E]
    if (cls == null) return new Field[0]; //[I-S]LN=93;[I-E]
 //[I-S]LN=94;[I-E]
    Field[] own = cls.getDeclaredFields(); //[I-S]LN=95;[I-E]
    Field[] inherited = getAllFields(cls.getSuperclass()); //[I-S]LN=96;[I-E]
    Field[] combined = new Field[own.length + inherited.length]; //[I-S]LN=97;[I-E]
 //[I-S]LN=98;[I-E]
    for (int i = 0; i < own.length; i++) { //[I-S]LN=99;[I-E]
      combined[i] = own[i]; //[I-S]LN=100;[I-E]
    } //[I-S]LN=101;[I-E]
    for (int i = 0; i < inherited.length; i++) { //[I-S]LN=102;[I-E]
      combined[own.length + i] = inherited[i]; //[I-S]LN=103;[I-E]
    } //[I-S]LN=104;[I-E]
 //[I-S]LN=105;[I-E]
    return combined; //[I-S]LN=106;[I-E]
  } //[I-S]LN=107;[I-E]
 //[I-S]LN=108;[I-E]
  // Get all methods including inherited (manual array copy) //[I-S]LN=109;[I-E]
  private static Method[] getAllMethods(Class cls) { //[I-S]LN=110;[I-E]
    if (cls == null) return new Method[0]; //[I-S]LN=111;[I-E]
 //[I-S]LN=112;[I-E]
    Method[] own = cls.getDeclaredMethods(); //[I-S]LN=113;[I-E]
    Method[] inherited = getAllMethods(cls.getSuperclass()); //[I-S]LN=114;[I-E]
    Method[] combined = new Method[own.length + inherited.length]; //[I-S]LN=115;[I-E]
 //[I-S]LN=116;[I-E]
    for (int i = 0; i < own.length; i++) { //[I-S]LN=117;[I-E]
      combined[i] = own[i]; //[I-S]LN=118;[I-E]
    } //[I-S]LN=119;[I-E]
    for (int i = 0; i < inherited.length; i++) { //[I-S]LN=120;[I-E]
      combined[own.length + i] = inherited[i]; //[I-S]LN=121;[I-E]
    } //[I-S]LN=122;[I-E]
 //[I-S]LN=123;[I-E]
    return combined; //[I-S]LN=124;[I-E]
  } //[I-S]LN=125;[I-E]
}  //[I-S]LN=126;[I-E]
