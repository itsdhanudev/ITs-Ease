{"autoCompleteData":{"varMap":{}},"compiledCode":["package JAVARuntime;","","import java.util.*;","import java.util.concurrent.*;","import java.util.concurrent.atomic.*;","import java.util.concurrent.locks.*;","import java.util.function.*;","import java.util.regex.*;","import java.util.stream.*;","import java.util.zip.*;","import java.text.*;","import java.net.*;","import java.math.*;","import java.io.*;","import java.nio.*;","import java.time.*;","import java.time.chrono.*;","import java.time.format.*;","import java.time.temporal.*;","import java.time.zone.*;","","","","public class _JContainer{}","","//C-R:Easer","final class Easer { //[I-S]LN\u003d0;[I-E]","  private Easer() {} //[I-S]LN\u003d1;[I-E]"," //[I-S]LN\u003d2;[I-E]","  public static float ease(float start, float end, float t, EasingTypes type) { //[I-S]LN\u003d3;[I-E]","    switch (type) { //[I-S]LN\u003d4;[I-E]","      case Linear: //[I-S]LN\u003d5;[I-E]","        return EasingFunctions.linear(start, end, t); //[I-S]LN\u003d6;[I-E]","      case EaseInQuad: //[I-S]LN\u003d7;[I-E]","        return EasingFunctions.easeInQuad(start, end, t); //[I-S]LN\u003d8;[I-E]","      case EaseOutQuad: //[I-S]LN\u003d9;[I-E]","        return EasingFunctions.easeOutQuad(start, end, t); //[I-S]LN\u003d10;[I-E]","      case EaseInOutQuad: //[I-S]LN\u003d11;[I-E]","        return EasingFunctions.easeInOutQuad(start, end, t); //[I-S]LN\u003d12;[I-E]","      case EaseInCubic: //[I-S]LN\u003d13;[I-E]","        return EasingFunctions.easeInCubic(start, end, t); //[I-S]LN\u003d14;[I-E]","      case EaseOutCubic: //[I-S]LN\u003d15;[I-E]","        return EasingFunctions.easeOutCubic(start, end, t); //[I-S]LN\u003d16;[I-E]","      case EaseInOutCubic: //[I-S]LN\u003d17;[I-E]","        return EasingFunctions.easeInOutCubic(start, end, t); //[I-S]LN\u003d18;[I-E]","      case EaseInQuart: //[I-S]LN\u003d19;[I-E]","        return EasingFunctions.easeInQuart(start, end, t); //[I-S]LN\u003d20;[I-E]","      case EaseOutQuart: //[I-S]LN\u003d21;[I-E]","        return EasingFunctions.easeOutQuart(start, end, t); //[I-S]LN\u003d22;[I-E]","      case EaseInOutQuart: //[I-S]LN\u003d23;[I-E]","        return EasingFunctions.easeInOutQuart(start, end, t); //[I-S]LN\u003d24;[I-E]","      case EaseInQuint: //[I-S]LN\u003d25;[I-E]","        return EasingFunctions.easeInQuint(start, end, t); //[I-S]LN\u003d26;[I-E]","      case EaseOutQuint: //[I-S]LN\u003d27;[I-E]","        return EasingFunctions.easeOutQuint(start, end, t); //[I-S]LN\u003d28;[I-E]","      case EaseInOutQuint: //[I-S]LN\u003d29;[I-E]","        return EasingFunctions.easeInOutQuint(start, end, t); //[I-S]LN\u003d30;[I-E]","      case EaseInSine: //[I-S]LN\u003d31;[I-E]","        return EasingFunctions.easeInSine(start, end, t); //[I-S]LN\u003d32;[I-E]","      case EaseOutSine: //[I-S]LN\u003d33;[I-E]","        return EasingFunctions.easeOutSine(start, end, t); //[I-S]LN\u003d34;[I-E]","      case EaseInOutSine: //[I-S]LN\u003d35;[I-E]","        return EasingFunctions.easeInOutSine(start, end, t); //[I-S]LN\u003d36;[I-E]","      case EaseInExpo: //[I-S]LN\u003d37;[I-E]","        return EasingFunctions.easeInExpo(start, end, t); //[I-S]LN\u003d38;[I-E]","      case EaseOutExpo: //[I-S]LN\u003d39;[I-E]","        return EasingFunctions.easeOutExpo(start, end, t); //[I-S]LN\u003d40;[I-E]","      case EaseInOutExpo: //[I-S]LN\u003d41;[I-E]","        return EasingFunctions.easeInOutExpo(start, end, t); //[I-S]LN\u003d42;[I-E]","      case EaseInCirc: //[I-S]LN\u003d43;[I-E]","        return EasingFunctions.easeInCirc(start, end, t); //[I-S]LN\u003d44;[I-E]","      case EaseOutCirc: //[I-S]LN\u003d45;[I-E]","        return EasingFunctions.easeOutCirc(start, end, t); //[I-S]LN\u003d46;[I-E]","      case EaseInOutCirc: //[I-S]LN\u003d47;[I-E]","        return EasingFunctions.easeInOutCirc(start, end, t); //[I-S]LN\u003d48;[I-E]","      case EaseInBack: //[I-S]LN\u003d49;[I-E]","        return EasingFunctions.easeInBack(start, end, t); //[I-S]LN\u003d50;[I-E]","      case EaseOutBack: //[I-S]LN\u003d51;[I-E]","        return EasingFunctions.easeOutBack(start, end, t); //[I-S]LN\u003d52;[I-E]","      case EaseInOutBack: //[I-S]LN\u003d53;[I-E]","        return EasingFunctions.easeInOutBack(start, end, t); //[I-S]LN\u003d54;[I-E]","      case EaseOutBounce: //[I-S]LN\u003d55;[I-E]","        return EasingFunctions.easeOutBounce(start, end, t); //[I-S]LN\u003d56;[I-E]","      case EaseInBounce: //[I-S]LN\u003d57;[I-E]","        return EasingFunctions.easeInBounce(start, end, t); //[I-S]LN\u003d58;[I-E]","      case EaseInOutBounce: //[I-S]LN\u003d59;[I-E]","        return EasingFunctions.easeInOutBounce(start, end, t); //[I-S]LN\u003d60;[I-E]","      case EaseInElastic: //[I-S]LN\u003d61;[I-E]","        return EasingFunctions.easeInElastic(start, end, t); //[I-S]LN\u003d62;[I-E]","      case EaseOutElastic: //[I-S]LN\u003d63;[I-E]","        return EasingFunctions.easeOutElastic(start, end, t); //[I-S]LN\u003d64;[I-E]","      case EaseInOutElastic: //[I-S]LN\u003d65;[I-E]","        return EasingFunctions.easeInOutElastic(start, end, t); //[I-S]LN\u003d66;[I-E]","      case SmoothStep: //[I-S]LN\u003d67;[I-E]","        return EasingFunctions.smoothStep(start, end, t); //[I-S]LN\u003d68;[I-E]","      case SmootherStep: //[I-S]LN\u003d69;[I-E]","        return EasingFunctions.smootherStep(start, end, t); //[I-S]LN\u003d70;[I-E]","      default: //[I-S]LN\u003d71;[I-E]","        return start; // fallback //[I-S]LN\u003d72;[I-E]","    } //[I-S]LN\u003d73;[I-E]","  } //[I-S]LN\u003d74;[I-E]"," //[I-S]LN\u003d75;[I-E]","  public static float ease(float start, float end, float t, Curve curve) { //[I-S]LN\u003d76;[I-E]","      return EasingFunctions.linear(start,end,curve.evaluate(t)); //[I-S]LN\u003d77;[I-E]","  }  //[I-S]LN\u003d78;[I-E]"," //[I-S]LN\u003d79;[I-E]","  public static Vector2 easeVec(Vector2 start, Vector2 end, float t, EasingTypes type) { //[I-S]LN\u003d80;[I-E]","    Vector2 desiredVec \u003d new Vector2(ease(start.getX(), end.getX(), t, type), ease(start.getY(), end.getY(), t, type)); //[I-S]LN\u003d81;[I-E]","    return desiredVec; //[I-S]LN\u003d82;[I-E]","  } //[I-S]LN\u003d83;[I-E]"," //[I-S]LN\u003d84;[I-E]","  public static Vector3 easeVec(Vector3 start, Vector3 end, float t, EasingTypes type) { //[I-S]LN\u003d85;[I-E]","    Vector3 desiredVec \u003d new Vector3(ease(start.getX(), end.getX(), t, type), ease(start.getY(), end.getY(), t, type), ease(start.getZ(), end.getZ(), t, type)); //[I-S]LN\u003d86;[I-E]","    return desiredVec; //[I-S]LN\u003d87;[I-E]","  } //[I-S]LN\u003d88;[I-E]","   //[I-S]LN\u003d89;[I-E]","  public static Vector2 easeVec(Vector2 start, Vector2 end, float t, Curve curve) { //[I-S]LN\u003d90;[I-E]","    Vector2 desiredVec \u003d new Vector2(ease(start.getX(), end.getX(), t, curve), ease(start.getY(), end.getY(), t, curve)); //[I-S]LN\u003d91;[I-E]","    return desiredVec; //[I-S]LN\u003d92;[I-E]","  } //[I-S]LN\u003d93;[I-E]"," //[I-S]LN\u003d94;[I-E]","  public static Vector3 easeVec(Vector3 start, Vector3 end, float t, Curve curve) { //[I-S]LN\u003d95;[I-E]","    Vector3 desiredVec \u003d new Vector3(ease(start.getX(), end.getX(), t,curve), ease(start.getY(), end.getY(), t, curve), ease(start.getZ(), end.getZ(), t, curve)); //[I-S]LN\u003d96;[I-E]","    return desiredVec; //[I-S]LN\u003d97;[I-E]","  } //[I-S]LN\u003d98;[I-E]"," //[I-S]LN\u003d99;[I-E]","  public static Quaternion easeQua(Vector3 start, Vector3 end, float t, EasingTypes type) { //[I-S]LN\u003d100;[I-E]","    Quaternion desiredQua; //[I-S]LN\u003d101;[I-E]","    desiredQua \u003d Quaternion.fromEuler(new Vector3(ease(start.getX(), end.getX(), t, type), ease(start.getY(), end.getY(), t, type), ease(start.getZ(), end.getZ(), t, type))); //[I-S]LN\u003d102;[I-E]","    return desiredQua; //[I-S]LN\u003d103;[I-E]","  } //[I-S]LN\u003d104;[I-E]","   //[I-S]LN\u003d105;[I-E]","  public static Quaternion easeQua(Vector3 start, Vector3 end, float t, Curve curve) { //[I-S]LN\u003d106;[I-E]","    Quaternion desiredQua; //[I-S]LN\u003d107;[I-E]","    desiredQua \u003d Quaternion.fromEuler(new Vector3(ease(start.getX(), end.getX(), t, curve), ease(start.getY(), end.getY(), t, curve), ease(start.getZ(), end.getZ(), t, curve))); //[I-S]LN\u003d108;[I-E]","    return desiredQua; //[I-S]LN\u003d109;[I-E]","  } //[I-S]LN\u003d110;[I-E]","  /* //[I-S]LN\u003d111;[I-E]","   * still finding a btter ways to use easings which more parameters //[I-S]LN\u003d112;[I-E]","   */ //[I-S]LN\u003d113;[I-E]","  /* //[I-S]LN\u003d114;[I-E]","  public static float ease(float start, float end, float t, EasingTypes type, float... params) { //[I-S]LN\u003d115;[I-E]","    switch (type) { //[I-S]LN\u003d116;[I-E]","      case Linear: //[I-S]LN\u003d117;[I-E]","        return EasingFunctions.linear(start, end, t); //[I-S]LN\u003d118;[I-E]","      case EaseInQuad: //[I-S]LN\u003d119;[I-E]","        return EasingFunctions.easeInQuad(start, end, t); //[I-S]LN\u003d120;[I-E]","      case EaseOutQuad: //[I-S]LN\u003d121;[I-E]","        return EasingFunctions.easeOutQuad(start, end, t); //[I-S]LN\u003d122;[I-E]","      case EaseInOutQuad: //[I-S]LN\u003d123;[I-E]","        return EasingFunctions.easeInOutQuad(start, end, t); //[I-S]LN\u003d124;[I-E]","      case EaseInCubic: //[I-S]LN\u003d125;[I-E]","        return EasingFunctions.easeInCubic(start, end, t); //[I-S]LN\u003d126;[I-E]","      case EaseOutCubic: //[I-S]LN\u003d127;[I-E]","        return EasingFunctions.easeOutCubic(start, end, t); //[I-S]LN\u003d128;[I-E]","      case EaseInOutCubic: //[I-S]LN\u003d129;[I-E]","        return EasingFunctions.easeInOutCubic(start, end, t); //[I-S]LN\u003d130;[I-E]","      case EaseInQuart: //[I-S]LN\u003d131;[I-E]","        return EasingFunctions.easeInQuart(start, end, t); //[I-S]LN\u003d132;[I-E]","      case EaseOutQuart: //[I-S]LN\u003d133;[I-E]","        return EasingFunctions.easeOutQuart(start, end, t); //[I-S]LN\u003d134;[I-E]","      case EaseInOutQuart: //[I-S]LN\u003d135;[I-E]","        return EasingFunctions.easeInOutQuart(start, end, t); //[I-S]LN\u003d136;[I-E]","      case EaseInQuint: //[I-S]LN\u003d137;[I-E]","        return EasingFunctions.easeInQuint(start, end, t); //[I-S]LN\u003d138;[I-E]","      case EaseOutQuint: //[I-S]LN\u003d139;[I-E]","        return EasingFunctions.easeOutQuint(start, end, t); //[I-S]LN\u003d140;[I-E]","      case EaseInOutQuint: //[I-S]LN\u003d141;[I-E]","        return EasingFunctions.easeInOutQuint(start, end, t); //[I-S]LN\u003d142;[I-E]","      case EaseInSine: //[I-S]LN\u003d143;[I-E]","        return EasingFunctions.easeInSine(start, end, t); //[I-S]LN\u003d144;[I-E]","      case EaseOutSine: //[I-S]LN\u003d145;[I-E]","        return EasingFunctions.easeOutSine(start, end, t); //[I-S]LN\u003d146;[I-E]","      case EaseInOutSine: //[I-S]LN\u003d147;[I-E]","        return EasingFunctions.easeInOutSine(start, end, t); //[I-S]LN\u003d148;[I-E]","      case EaseInExpo: //[I-S]LN\u003d149;[I-E]","        return EasingFunctions.easeInExpo(start, end, t); //[I-S]LN\u003d150;[I-E]","      case EaseOutExpo: //[I-S]LN\u003d151;[I-E]","        return EasingFunctions.easeOutExpo(start, end, t); //[I-S]LN\u003d152;[I-E]","      case EaseInOutExpo: //[I-S]LN\u003d153;[I-E]","        return EasingFunctions.easeInOutExpo(start, end, t); //[I-S]LN\u003d154;[I-E]","      case EaseInCirc: //[I-S]LN\u003d155;[I-E]","        return EasingFunctions.easeInCirc(start, end, t); //[I-S]LN\u003d156;[I-E]","      case EaseOutCirc: //[I-S]LN\u003d157;[I-E]","        return EasingFunctions.easeOutCirc(start, end, t); //[I-S]LN\u003d158;[I-E]","      case EaseInOutCirc: //[I-S]LN\u003d159;[I-E]","        return EasingFunctions.easeInOutCirc(start, end, t); //[I-S]LN\u003d160;[I-E]","      case EaseInBack: //[I-S]LN\u003d161;[I-E]","        return EasingFunctions.easeInBack(start, end, t); //[I-S]LN\u003d162;[I-E]","      case EaseOutBack: //[I-S]LN\u003d163;[I-E]","        return EasingFunctions.easeOutBack(start, end, t); //[I-S]LN\u003d164;[I-E]","      case EaseInOutBack: //[I-S]LN\u003d165;[I-E]","        return EasingFunctions.easeInOutBack(start, end, t); //[I-S]LN\u003d166;[I-E]","      case EaseOutBounce: //[I-S]LN\u003d167;[I-E]","        return EasingFunctions.easeOutBounce(start, end, t); //[I-S]LN\u003d168;[I-E]","      case EaseInBounce: //[I-S]LN\u003d169;[I-E]","        return EasingFunctions.easeInBounce(start, end, t); //[I-S]LN\u003d170;[I-E]","      case EaseInOutBounce: //[I-S]LN\u003d171;[I-E]","        return EasingFunctions.easeInOutBounce(start, end, t); //[I-S]LN\u003d172;[I-E]","      case EaseInElastic: //[I-S]LN\u003d173;[I-E]","        return EasingFunctions.easeInElastic(start, end, t); //[I-S]LN\u003d174;[I-E]","      case EaseOutElastic: //[I-S]LN\u003d175;[I-E]","        return EasingFunctions.easeOutElastic(start, end, t); //[I-S]LN\u003d176;[I-E]","      case EaseInOutElastic: //[I-S]LN\u003d177;[I-E]","        return EasingFunctions.easeInOutElastic(start, end, t); //[I-S]LN\u003d178;[I-E]","      case SmoothStep: //[I-S]LN\u003d179;[I-E]","        return EasingFunctions.smoothStep(start, end, t); //[I-S]LN\u003d180;[I-E]","      case SmootherStep: //[I-S]LN\u003d181;[I-E]","        return EasingFunctions.smootherStep(start, end, t); //[I-S]LN\u003d182;[I-E]","      default: //[I-S]LN\u003d183;[I-E]","        return start; // fallback //[I-S]LN\u003d184;[I-E]","    } //[I-S]LN\u003d185;[I-E]","  } //[I-S]LN\u003d186;[I-E]","  */ //[I-S]LN\u003d187;[I-E]"," //[I-S]LN\u003d188;[I-E]","} //[I-S]LN\u003d189;[I-E]","//C-R:EasingFunctions","/* @Author Dhanu */  //[I-S]LN\u003d0;[I-E]","class EasingFunctions{ //[I-S]LN\u003d1;[I-E]","    //[I-S]LN\u003d2;[I-E]","  private static float clamp01(float t) { //[I-S]LN\u003d3;[I-E]","    if (t \u003c\u003d 0.0f) return 0.0f; //[I-S]LN\u003d4;[I-E]","    if (t \u003e\u003d 1.0f) return 1.0f; //[I-S]LN\u003d5;[I-E]","    return t; //[I-S]LN\u003d6;[I-E]","  } //[I-S]LN\u003d7;[I-E]"," //[I-S]LN\u003d8;[I-E]","  public static float linear(float start, float end, float t) { //[I-S]LN\u003d9;[I-E]","    return start + (end - start) * t; //[I-S]LN\u003d10;[I-E]","  } //[I-S]LN\u003d11;[I-E]"," //[I-S]LN\u003d12;[I-E]","  public static float easeInQuad(float start, float end, float t) { //[I-S]LN\u003d13;[I-E]","    return start + (end - start) * (t * t); //[I-S]LN\u003d14;[I-E]","  } //[I-S]LN\u003d15;[I-E]"," //[I-S]LN\u003d16;[I-E]","  public static float easeOutQuad(float start, float end, float t) { //[I-S]LN\u003d17;[I-E]","    return start - (end - start) * (t * (t - 2.0f)); //[I-S]LN\u003d18;[I-E]","  } //[I-S]LN\u003d19;[I-E]"," //[I-S]LN\u003d20;[I-E]","  public static float easeInOutQuad(float start, float end, float t) { //[I-S]LN\u003d21;[I-E]","    t *\u003d 2.0f; //[I-S]LN\u003d22;[I-E]","    if (t \u003c 1.0f) return start + (end - start) / 2.0f * (t * t); //[I-S]LN\u003d23;[I-E]","    t -\u003d 1.0f; //[I-S]LN\u003d24;[I-E]","    return start - (end - start) / 2.0f * (t * (t - 2.0f) - 1.0f); //[I-S]LN\u003d25;[I-E]","  } //[I-S]LN\u003d26;[I-E]"," //[I-S]LN\u003d27;[I-E]","  public static float easeInCubic(float start, float end, float t) { //[I-S]LN\u003d28;[I-E]","    return start + (end - start) * (t * t * t); //[I-S]LN\u003d29;[I-E]","  } //[I-S]LN\u003d30;[I-E]"," //[I-S]LN\u003d31;[I-E]","  public static float easeOutCubic(float start, float end, float t) { //[I-S]LN\u003d32;[I-E]","    t -\u003d 1.0f; //[I-S]LN\u003d33;[I-E]","    return start + (end - start) * (t * t * t + 1.0f); //[I-S]LN\u003d34;[I-E]","  } //[I-S]LN\u003d35;[I-E]"," //[I-S]LN\u003d36;[I-E]","  public static float easeInOutCubic(float start, float end, float t) { //[I-S]LN\u003d37;[I-E]","    t *\u003d 2.0f; //[I-S]LN\u003d38;[I-E]","    if (t \u003c 1.0f) return start + (end - start) / 2.0f * (t * t * t); //[I-S]LN\u003d39;[I-E]","    t -\u003d 2.0f; //[I-S]LN\u003d40;[I-E]","    return start + (end - start) / 2.0f * (t * t * t + 2.0f); //[I-S]LN\u003d41;[I-E]","  } //[I-S]LN\u003d42;[I-E]"," //[I-S]LN\u003d43;[I-E]","  public static float easeInQuart(float start, float end, float t) { //[I-S]LN\u003d44;[I-E]","    return start + (end - start) * (t * t * t * t); //[I-S]LN\u003d45;[I-E]","  } //[I-S]LN\u003d46;[I-E]"," //[I-S]LN\u003d47;[I-E]","  public static float easeOutQuart(float start, float end, float t) { //[I-S]LN\u003d48;[I-E]","    t -\u003d 1.0f; //[I-S]LN\u003d49;[I-E]","    return start - (end - start) * (t * t * t * t - 1.0f); //[I-S]LN\u003d50;[I-E]","  } //[I-S]LN\u003d51;[I-E]"," //[I-S]LN\u003d52;[I-E]","  public static float easeInOutQuart(float start, float end, float t) { //[I-S]LN\u003d53;[I-E]","    t *\u003d 2.0f; //[I-S]LN\u003d54;[I-E]","    if (t \u003c 1.0f) return start + (end - start) / 2.0f * (t * t * t * t); //[I-S]LN\u003d55;[I-E]","    t -\u003d 2.0f; //[I-S]LN\u003d56;[I-E]","    return start - (end - start) / 2.0f * (t * t * t * t - 2.0f); //[I-S]LN\u003d57;[I-E]","  } //[I-S]LN\u003d58;[I-E]"," //[I-S]LN\u003d59;[I-E]","  public static float easeInQuint(float start, float end, float t) { //[I-S]LN\u003d60;[I-E]","    return start + (end - start) * (t * t * t * t * t); //[I-S]LN\u003d61;[I-E]","  } //[I-S]LN\u003d62;[I-E]"," //[I-S]LN\u003d63;[I-E]","  public static float easeOutQuint(float start, float end, float t) { //[I-S]LN\u003d64;[I-E]","    t -\u003d 1.0f; //[I-S]LN\u003d65;[I-E]","    return start + (end - start) * (t * t * t * t * t + 1.0f); //[I-S]LN\u003d66;[I-E]","  } //[I-S]LN\u003d67;[I-E]"," //[I-S]LN\u003d68;[I-E]","  public static float easeInOutQuint(float start, float end, float t) { //[I-S]LN\u003d69;[I-E]","    t *\u003d 2.0f; //[I-S]LN\u003d70;[I-E]","    if (t \u003c 1.0f) return start + (end - start) / 2.0f * (t * t * t * t * t); //[I-S]LN\u003d71;[I-E]","    t -\u003d 2.0f; //[I-S]LN\u003d72;[I-E]","    return start + (end - start) / 2.0f * (t * t * t * t * t + 2.0f); //[I-S]LN\u003d73;[I-E]","  } //[I-S]LN\u003d74;[I-E]"," //[I-S]LN\u003d75;[I-E]","  public static float easeInSine(float start, float end, float t) { //[I-S]LN\u003d76;[I-E]","    return start - (end - start) * (float) Math.cos(t * Math.PI / 2.0f) + (end - start); //[I-S]LN\u003d77;[I-E]","  } //[I-S]LN\u003d78;[I-E]"," //[I-S]LN\u003d79;[I-E]","  public static float easeOutSine(float start, float end, float t) { //[I-S]LN\u003d80;[I-E]","    return start + (end - start) * (float) Math.sin(t * Math.PI / 2.0f); //[I-S]LN\u003d81;[I-E]","  } //[I-S]LN\u003d82;[I-E]"," //[I-S]LN\u003d83;[I-E]","  public static float easeInOutSine(float start, float end, float t) { //[I-S]LN\u003d84;[I-E]","    return start - (end - start) / 2.0f * ((float) Math.cos(Math.PI * t) - 1.0f); //[I-S]LN\u003d85;[I-E]","  } //[I-S]LN\u003d86;[I-E]"," //[I-S]LN\u003d87;[I-E]","  public static float easeInExpo(float start, float end, float t) { //[I-S]LN\u003d88;[I-E]","    if (t \u003d\u003d 0.0f) return start; //[I-S]LN\u003d89;[I-E]","    return start + (end - start) * (float) Math.pow(2.0f, 10.0f * (t - 1.0f)); //[I-S]LN\u003d90;[I-E]","  } //[I-S]LN\u003d91;[I-E]"," //[I-S]LN\u003d92;[I-E]","  public static float easeOutExpo(float start, float end, float t) { //[I-S]LN\u003d93;[I-E]","    if (t \u003d\u003d 1.0f) return end; //[I-S]LN\u003d94;[I-E]","    return start + (end - start) * (-(float) Math.pow(2.0f, -10.0f * t) + 1.0f); //[I-S]LN\u003d95;[I-E]","  } //[I-S]LN\u003d96;[I-E]"," //[I-S]LN\u003d97;[I-E]","  public static float easeInOutExpo(float start, float end, float t) { //[I-S]LN\u003d98;[I-E]","    if (t \u003d\u003d 0.0f) return start; //[I-S]LN\u003d99;[I-E]","    if (t \u003d\u003d 1.0f) return end; //[I-S]LN\u003d100;[I-E]","    t *\u003d 2.0f; //[I-S]LN\u003d101;[I-E]","    if (t \u003c 1.0f) return start + (end - start) / 2.0f * (float) Math.pow(2.0f, 10.0f * (t - 1.0f)); //[I-S]LN\u003d102;[I-E]","    t -\u003d 1.0f; //[I-S]LN\u003d103;[I-E]","    return start + (end - start) / 2.0f * (-(float) Math.pow(2.0f, -10.0f * t) + 2.0f); //[I-S]LN\u003d104;[I-E]","  } //[I-S]LN\u003d105;[I-E]"," //[I-S]LN\u003d106;[I-E]","  public static float easeInCirc(float start, float end, float t) { //[I-S]LN\u003d107;[I-E]","    return start - (end - start) * ((float) Math.sqrt(1.0f - t * t) - 1.0f); //[I-S]LN\u003d108;[I-E]","  } //[I-S]LN\u003d109;[I-E]"," //[I-S]LN\u003d110;[I-E]","  public static float easeOutCirc(float start, float end, float t) { //[I-S]LN\u003d111;[I-E]","    t -\u003d 1.0f; //[I-S]LN\u003d112;[I-E]","    return start + (end - start) * (float) Math.sqrt(1.0f - t * t); //[I-S]LN\u003d113;[I-E]","  } //[I-S]LN\u003d114;[I-E]"," //[I-S]LN\u003d115;[I-E]","  public static float easeInOutCirc(float start, float end, float t) { //[I-S]LN\u003d116;[I-E]","    t *\u003d 2.0f; //[I-S]LN\u003d117;[I-E]","    if (t \u003c 1.0f) return start - (end - start) / 2.0f * ((float) Math.sqrt(1.0f - t * t) - 1.0f); //[I-S]LN\u003d118;[I-E]","    t -\u003d 2.0f; //[I-S]LN\u003d119;[I-E]","    return start + (end - start) / 2.0f * ((float) Math.sqrt(1.0f - t * t) + 1.0f); //[I-S]LN\u003d120;[I-E]","  } //[I-S]LN\u003d121;[I-E]"," //[I-S]LN\u003d122;[I-E]","  public static float easeInBack(float start, float end, float t) { //[I-S]LN\u003d123;[I-E]","    float s \u003d 1.70158f; //[I-S]LN\u003d124;[I-E]","    return start + (end - start) * (t * t * ((s + 1.0f) * t - s)); //[I-S]LN\u003d125;[I-E]","  } //[I-S]LN\u003d126;[I-E]"," //[I-S]LN\u003d127;[I-E]","  public static float easeOutBack(float start, float end, float t) { //[I-S]LN\u003d128;[I-E]","    float s \u003d 1.70158f; //[I-S]LN\u003d129;[I-E]","    t -\u003d 1.0f; //[I-S]LN\u003d130;[I-E]","    return start + (end - start) * (t * t * ((s + 1.0f) * t + s) + 1.0f); //[I-S]LN\u003d131;[I-E]","  } //[I-S]LN\u003d132;[I-E]"," //[I-S]LN\u003d133;[I-E]","  public static float easeInOutBack(float start, float end, float t) { //[I-S]LN\u003d134;[I-E]","    float s \u003d 1.70158f * 1.525f; //[I-S]LN\u003d135;[I-E]","    t *\u003d 2.0f; //[I-S]LN\u003d136;[I-E]","    if (t \u003c 1.0f) return start + (end - start) / 2.0f * (t * t * ((s + 1.0f) * t - s)); //[I-S]LN\u003d137;[I-E]","    t -\u003d 2.0f; //[I-S]LN\u003d138;[I-E]","    return start + (end - start) / 2.0f * (t * t * ((s + 1.0f) * t + s) + 2.0f); //[I-S]LN\u003d139;[I-E]","  } //[I-S]LN\u003d140;[I-E]"," //[I-S]LN\u003d141;[I-E]","  public static float easeOutBounce(float start, float end, float t) { //[I-S]LN\u003d142;[I-E]","    float n1 \u003d 7.5625f; //[I-S]LN\u003d143;[I-E]","    float d1 \u003d 2.75f; //[I-S]LN\u003d144;[I-E]","    float diff \u003d (end - start); //[I-S]LN\u003d145;[I-E]","    if (t \u003c 1.0f / d1) { //[I-S]LN\u003d146;[I-E]","      return start + diff * (n1 * t * t); //[I-S]LN\u003d147;[I-E]","    } else if (t \u003c 2.0f / d1) { //[I-S]LN\u003d148;[I-E]","      t -\u003d 1.5f / d1; //[I-S]LN\u003d149;[I-E]","      return start + diff * (n1 * t * t + 0.75f); //[I-S]LN\u003d150;[I-E]","    } else if (t \u003c 2.5f / d1) { //[I-S]LN\u003d151;[I-E]","      t -\u003d 2.25f / d1; //[I-S]LN\u003d152;[I-E]","      return start + diff * (n1 * t * t + 0.9375f); //[I-S]LN\u003d153;[I-E]","    } else { //[I-S]LN\u003d154;[I-E]","      t -\u003d 2.625f / d1; //[I-S]LN\u003d155;[I-E]","      return start + diff * (n1 * t * t + 0.984375f); //[I-S]LN\u003d156;[I-E]","    } //[I-S]LN\u003d157;[I-E]","  } //[I-S]LN\u003d158;[I-E]"," //[I-S]LN\u003d159;[I-E]","  public static float easeInBounce(float start, float end, float t) { //[I-S]LN\u003d160;[I-E]","    float inv \u003d easeOutBounce(0.0f, 1.0f, 1.0f - t); //[I-S]LN\u003d161;[I-E]","    return start + (end - start) * (1.0f - inv); //[I-S]LN\u003d162;[I-E]","  } //[I-S]LN\u003d163;[I-E]"," //[I-S]LN\u003d164;[I-E]","  public static float easeInOutBounce(float start, float end, float t) { //[I-S]LN\u003d165;[I-E]","    if (t \u003c 0.5f) return start + (end - start) * 0.5f * (1.0f - easeOutBounce(0.0f, 1.0f, 1.0f - (t * 2.0f))); //[I-S]LN\u003d166;[I-E]","    else return start + (end - start) * (0.5f * easeOutBounce(0.0f, 1.0f, (t * 2.0f - 1.0f)) + 0.5f); //[I-S]LN\u003d167;[I-E]","  } //[I-S]LN\u003d168;[I-E]"," //[I-S]LN\u003d169;[I-E]","  public static float easeInElastic(float start, float end, float t) { //[I-S]LN\u003d170;[I-E]","    if (t \u003d\u003d 0.0f) return start; //[I-S]LN\u003d171;[I-E]","    if (t \u003d\u003d 1.0f) return end; //[I-S]LN\u003d172;[I-E]","    float p \u003d 0.3f; //[I-S]LN\u003d173;[I-E]","    float s \u003d p / 4.0f; //[I-S]LN\u003d174;[I-E]","    t -\u003d 1.0f; //[I-S]LN\u003d175;[I-E]","    return start + -(end - start) * (float) Math.pow(2.0f, 10.0f * t) * (float) Math.sin((t - s) * (2.0f * Math.PI) / p); //[I-S]LN\u003d176;[I-E]","  } //[I-S]LN\u003d177;[I-E]"," //[I-S]LN\u003d178;[I-E]","  public static float easeOutElastic(float start, float end, float t) { //[I-S]LN\u003d179;[I-E]","    if (t \u003d\u003d 0.0f) return start; //[I-S]LN\u003d180;[I-E]","    if (t \u003d\u003d 1.0f) return end; //[I-S]LN\u003d181;[I-E]","    float p \u003d 0.3f; //[I-S]LN\u003d182;[I-E]","    float s \u003d p / 4.0f; //[I-S]LN\u003d183;[I-E]","    return start + (end - start) * ((float) Math.pow(2.0f, -10.0f * t) * (float) Math.sin((t - s) * (2.0f * Math.PI) / p) + 1.0f); //[I-S]LN\u003d184;[I-E]","  } //[I-S]LN\u003d185;[I-E]"," //[I-S]LN\u003d186;[I-E]","  public static float easeInOutElastic(float start, float end, float t) { //[I-S]LN\u003d187;[I-E]","    if (t \u003d\u003d 0.0f) return start; //[I-S]LN\u003d188;[I-E]","    if (t \u003d\u003d 1.0f) return end; //[I-S]LN\u003d189;[I-E]","    float p \u003d 0.45f; //[I-S]LN\u003d190;[I-E]","    float s \u003d p / 4.0f; //[I-S]LN\u003d191;[I-E]","    t *\u003d 2.0f; //[I-S]LN\u003d192;[I-E]","    if (t \u003c 1.0f) { //[I-S]LN\u003d193;[I-E]","      t -\u003d 1.0f; //[I-S]LN\u003d194;[I-E]","      return start + -(end - start) / 2.0f * (float) Math.pow(2.0f, 10.0f * t) * (float) Math.sin((t - s) * (2.0f * Math.PI) / p); //[I-S]LN\u003d195;[I-E]","    } else { //[I-S]LN\u003d196;[I-E]","      t -\u003d 1.0f; //[I-S]LN\u003d197;[I-E]","      return start + (end - start) / 2.0f * ((float) Math.pow(2.0f, -10.0f * t) * (float) Math.sin((t - s) * (2.0f * Math.PI) / p) + 1.0f); //[I-S]LN\u003d198;[I-E]","    } //[I-S]LN\u003d199;[I-E]","  } //[I-S]LN\u003d200;[I-E]"," //[I-S]LN\u003d201;[I-E]","  public static float smoothStep(float start, float end, float t) { //[I-S]LN\u003d202;[I-E]","    t \u003d clamp01(t); //[I-S]LN\u003d203;[I-E]","    return start + (end - start) * (t * t * (3.0f - 2.0f * t)); //[I-S]LN\u003d204;[I-E]","  } //[I-S]LN\u003d205;[I-E]"," //[I-S]LN\u003d206;[I-E]","  public static float smootherStep(float start, float end, float t) { //[I-S]LN\u003d207;[I-E]","    t \u003d clamp01(t); //[I-S]LN\u003d208;[I-E]","    return start + (end - start) * (t * t * t * (t * (6.0f * t - 15.0f) + 10.0f)); //[I-S]LN\u003d209;[I-E]","  } //[I-S]LN\u003d210;[I-E]"," //[I-S]LN\u003d211;[I-E]","  public static float step(float start, float end, float t, int steps) { //[I-S]LN\u003d212;[I-E]","    if (steps \u003c\u003d 1) return (t \u003c 0.5f ? start : end); //[I-S]LN\u003d213;[I-E]","    t \u003d clamp01(t); //[I-S]LN\u003d214;[I-E]","    float stepT \u003d (float) Math.floor(t * steps) / (float) steps; //[I-S]LN\u003d215;[I-E]","    return start + (end - start) * stepT; //[I-S]LN\u003d216;[I-E]","  } //[I-S]LN\u003d217;[I-E]"," //[I-S]LN\u003d218;[I-E]","  public static float easeInPower(float start, float end, float t, int n) { //[I-S]LN\u003d219;[I-E]","    if (n \u003c\u003d 1) return linear(start, end, t); //[I-S]LN\u003d220;[I-E]","    return start + (end - start) * (float) Math.pow(t, n); //[I-S]LN\u003d221;[I-E]","  } //[I-S]LN\u003d222;[I-E]"," //[I-S]LN\u003d223;[I-E]","  public static float easeOutPower(float start, float end, float t, int n) { //[I-S]LN\u003d224;[I-E]","    if (n \u003c\u003d 1) return linear(start, end, t); //[I-S]LN\u003d225;[I-E]","    return start + (end - start) * (1.0f - (float) Math.pow(1.0f - t, n)); //[I-S]LN\u003d226;[I-E]","  } //[I-S]LN\u003d227;[I-E]"," //[I-S]LN\u003d228;[I-E]","  public static float easeInOutPower(float start, float end, float t, int n) { //[I-S]LN\u003d229;[I-E]","    if (n \u003c\u003d 1) return linear(start, end, t); //[I-S]LN\u003d230;[I-E]","    t *\u003d 2.0f; //[I-S]LN\u003d231;[I-E]","    if (t \u003c 1.0f) return start + (end - start) / 2.0f * (float) Math.pow(t, n); //[I-S]LN\u003d232;[I-E]","    t -\u003d 1.0f; //[I-S]LN\u003d233;[I-E]","    return start + (end - start) / 2.0f * (1.0f - (float) Math.pow(1.0f - t, n) + 1.0f); //[I-S]LN\u003d234;[I-E]","  } //[I-S]LN\u003d235;[I-E]"," //[I-S]LN\u003d236;[I-E]","  public static float cubicBezier(float start, float end, float t, float x1, float y1, float x2, float y2) { //[I-S]LN\u003d237;[I-E]","    t \u003d clamp01(t); //[I-S]LN\u003d238;[I-E]","    float diff \u003d end - start; //[I-S]LN\u003d239;[I-E]","    if (x1 \u003d\u003d y1 \u0026\u0026 x2 \u003d\u003d y2 \u0026\u0026 x1 \u003d\u003d x2) { //[I-S]LN\u003d240;[I-E]","      return start + diff * t; //[I-S]LN\u003d241;[I-E]","    } //[I-S]LN\u003d242;[I-E]","    float lower \u003d 0.0f; //[I-S]LN\u003d243;[I-E]","    float upper \u003d 1.0f; //[I-S]LN\u003d244;[I-E]","    float u \u003d t; //[I-S]LN\u003d245;[I-E]","    for (int i \u003d 0; i \u003c 24; i++) { //[I-S]LN\u003d246;[I-E]","      u \u003d (lower + upper) * 0.5f; //[I-S]LN\u003d247;[I-E]","      float xAtU \u003d cubicBezierSample(u, x1, x2); //[I-S]LN\u003d248;[I-E]","      if (xAtU \u003e t) upper \u003d u; //[I-S]LN\u003d249;[I-E]","      else lower \u003d u; //[I-S]LN\u003d250;[I-E]","    } //[I-S]LN\u003d251;[I-E]","    float yAtU \u003d cubicBezierSample(u, y1, y2); //[I-S]LN\u003d252;[I-E]","    return start + diff * yAtU; //[I-S]LN\u003d253;[I-E]","  } //[I-S]LN\u003d254;[I-E]"," //[I-S]LN\u003d255;[I-E]","  private static float cubicBezierSample(float u, float c1, float c2) { //[I-S]LN\u003d256;[I-E]","    float inv \u003d 1.0f - u; //[I-S]LN\u003d257;[I-E]","    float a \u003d 3.0f * inv * inv * u * c1; //[I-S]LN\u003d258;[I-E]","    float b \u003d 3.0f * inv * u * u * c2; //[I-S]LN\u003d259;[I-E]","    float c \u003d u * u * u; //[I-S]LN\u003d260;[I-E]","    return a + b + c; //[I-S]LN\u003d261;[I-E]","  } //[I-S]LN\u003d262;[I-E]"," //[I-S]LN\u003d263;[I-E]","  private static float deterministicNoise(int i) { //[I-S]LN\u003d264;[I-E]","    float x \u003d Math.sin((float) i * 127.1f) * 43758.5453f; //[I-S]LN\u003d265;[I-E]","    float frac \u003d x - Math.floor(x); //[I-S]LN\u003d266;[I-E]","    return (float) frac; //[I-S]LN\u003d267;[I-E]","  } //[I-S]LN\u003d268;[I-E]","}  //[I-S]LN\u003d269;[I-E]","//C-R:EasingTypes","/* @Author Dhanu */ //[I-S]LN\u003d0;[I-E]","enum EasingTypes { //[I-S]LN\u003d1;[I-E]","  Linear, //[I-S]LN\u003d2;[I-E]","  EaseInQuad, //[I-S]LN\u003d3;[I-E]","  EaseOutQuad, //[I-S]LN\u003d4;[I-E]","  EaseInOutQuad, //[I-S]LN\u003d5;[I-E]","  EaseInCubic, //[I-S]LN\u003d6;[I-E]","  EaseOutCubic, //[I-S]LN\u003d7;[I-E]","  EaseInOutCubic, //[I-S]LN\u003d8;[I-E]","  EaseInQuart, //[I-S]LN\u003d9;[I-E]","  EaseOutQuart, //[I-S]LN\u003d10;[I-E]","  EaseInOutQuart, //[I-S]LN\u003d11;[I-E]","  EaseInQuint, //[I-S]LN\u003d12;[I-E]","  EaseOutQuint, //[I-S]LN\u003d13;[I-E]","  EaseInOutQuint, //[I-S]LN\u003d14;[I-E]","  EaseInSine, //[I-S]LN\u003d15;[I-E]","  EaseOutSine, //[I-S]LN\u003d16;[I-E]","  EaseInOutSine, //[I-S]LN\u003d17;[I-E]","  EaseInExpo, //[I-S]LN\u003d18;[I-E]","  EaseOutExpo, //[I-S]LN\u003d19;[I-E]","  EaseInOutExpo, //[I-S]LN\u003d20;[I-E]","  EaseInCirc, //[I-S]LN\u003d21;[I-E]","  EaseOutCirc, //[I-S]LN\u003d22;[I-E]","  EaseInOutCirc, //[I-S]LN\u003d23;[I-E]","  EaseInBack, //[I-S]LN\u003d24;[I-E]","  EaseOutBack, //[I-S]LN\u003d25;[I-E]","  EaseInOutBack, //[I-S]LN\u003d26;[I-E]","  EaseOutBounce, //[I-S]LN\u003d27;[I-E]","  EaseInBounce, //[I-S]LN\u003d28;[I-E]","  EaseInOutBounce, //[I-S]LN\u003d29;[I-E]","  EaseInElastic, //[I-S]LN\u003d30;[I-E]","  EaseOutElastic, //[I-S]LN\u003d31;[I-E]","  EaseInOutElastic, //[I-S]LN\u003d32;[I-E]","  SmoothStep, //[I-S]LN\u003d33;[I-E]","  SmootherStep, //[I-S]LN\u003d34;[I-E]","  Step, //[I-S]LN\u003d35;[I-E]","  EaseInPower, //[I-S]LN\u003d36;[I-E]","  EaseOutPower, //[I-S]LN\u003d37;[I-E]","  EaseInOutPower, //[I-S]LN\u003d38;[I-E]","  CubicBezier //[I-S]LN\u003d39;[I-E]","}  //[I-S]LN\u003d40;[I-E]","//C-R:Mathf","final class Mathf { //[I-S]LN\u003d0;[I-E]"," //[I-S]LN\u003d1;[I-E]","  private Mathf() {} //[I-S]LN\u003d2;[I-E]"," //[I-S]LN\u003d3;[I-E]","  public static final float PI \u003d 3.1415927f; //[I-S]LN\u003d4;[I-E]","  public static final float DEG2RAD \u003d PI / 180f; //[I-S]LN\u003d5;[I-E]","  public static final float RAD2DEG \u003d 180f / PI; //[I-S]LN\u003d6;[I-E]","  public static final float E \u003d 2.7182818f; //[I-S]LN\u003d7;[I-E]","  public static final float EPSILON \u003d 1.1920929E-7f; //[I-S]LN\u003d8;[I-E]","  public static final float INFINITY \u003d Float.POSITIVE_INFINITY; //[I-S]LN\u003d9;[I-E]","  public static final float NEGATIVE_INFINITY \u003d Float.NEGATIVE_INFINITY; //[I-S]LN\u003d10;[I-E]","  public static final float HALF_PI \u003d PI / 2f; //[I-S]LN\u003d11;[I-E]","  public static final float TWO_PI \u003d 2 * PI; //[I-S]LN\u003d12;[I-E]","  public static final float SQRT2 \u003d 1.4142135f; //[I-S]LN\u003d13;[I-E]","  public static final float SQRT3 \u003d 1.7320508f; //[I-S]LN\u003d14;[I-E]","  public static final float GOLDEN_RATIO \u003d 1.618034f; //[I-S]LN\u003d15;[I-E]","  public static final float LN2 \u003d 0.6931472f; //[I-S]LN\u003d16;[I-E]","  public static final float LN10 \u003d 2.3025851f; //[I-S]LN\u003d17;[I-E]","  private static long lastTimeNano \u003d java.lang.System.nanoTime(); //[I-S]LN\u003d18;[I-E]","  private static float lastTimeSeconds \u003d java.lang.System.nanoTime() / 1000000000f;  //[I-S]LN\u003d19;[I-E]","   //[I-S]LN\u003d20;[I-E]","  // Methods //[I-S]LN\u003d21;[I-E]","  public static float abs(float v) { //[I-S]LN\u003d22;[I-E]","    return v \u003c 0 ? -v : v; //[I-S]LN\u003d23;[I-E]","  } //[I-S]LN\u003d24;[I-E]"," //[I-S]LN\u003d25;[I-E]","  public static int abs(int v) { //[I-S]LN\u003d26;[I-E]","    return v \u003c 0 ? -v : v; //[I-S]LN\u003d27;[I-E]","  } //[I-S]LN\u003d28;[I-E]"," //[I-S]LN\u003d29;[I-E]","  public static float acos(float f) { //[I-S]LN\u003d30;[I-E]","    return (float) Math.acos(f); //[I-S]LN\u003d31;[I-E]","  } //[I-S]LN\u003d32;[I-E]"," //[I-S]LN\u003d33;[I-E]","  public static float asin(float f) { //[I-S]LN\u003d34;[I-E]","    return (float) Math.asin(f); //[I-S]LN\u003d35;[I-E]","  } //[I-S]LN\u003d36;[I-E]"," //[I-S]LN\u003d37;[I-E]","  public static float atan(float f) { //[I-S]LN\u003d38;[I-E]","    return (float) Math.atan(f); //[I-S]LN\u003d39;[I-E]","  } //[I-S]LN\u003d40;[I-E]"," //[I-S]LN\u003d41;[I-E]","  public static float atan2(float y, float x) { //[I-S]LN\u003d42;[I-E]","    return (float) Math.atan2(y, x); //[I-S]LN\u003d43;[I-E]","  } //[I-S]LN\u003d44;[I-E]"," //[I-S]LN\u003d45;[I-E]","  public static float byNanoSecond() { //[I-S]LN\u003d46;[I-E]","    return java.lang.System.nanoTime(); //[I-S]LN\u003d47;[I-E]","  } //[I-S]LN\u003d48;[I-E]"," //[I-S]LN\u003d49;[I-E]","  public static float bySecond() { //[I-S]LN\u003d50;[I-E]","    float currentTimeSeconds \u003d System.nanoTime() / 1000000000f; //[I-S]LN\u003d51;[I-E]","    float deltaTime \u003d currentTimeSeconds - lastTimeSeconds; //[I-S]LN\u003d52;[I-E]","    lastTimeSeconds \u003d currentTimeSeconds; //[I-S]LN\u003d53;[I-E]","    return deltaTime; //[I-S]LN\u003d54;[I-E]","  }  //[I-S]LN\u003d55;[I-E]"," //[I-S]LN\u003d56;[I-E]","  public static float ceil(float f) { //[I-S]LN\u003d57;[I-E]","    return (float) Math.ceil(f); //[I-S]LN\u003d58;[I-E]","  } //[I-S]LN\u003d59;[I-E]"," //[I-S]LN\u003d60;[I-E]","  public static float clamp(float value, float min, float max) { //[I-S]LN\u003d61;[I-E]","    return max(min, min(value, max)); //[I-S]LN\u003d62;[I-E]","  } //[I-S]LN\u003d63;[I-E]"," //[I-S]LN\u003d64;[I-E]","  public static int clamp(int value, int min, int max) { //[I-S]LN\u003d65;[I-E]","    return Math.max(min, Math.min(value, max)); //[I-S]LN\u003d66;[I-E]","  } //[I-S]LN\u003d67;[I-E]"," //[I-S]LN\u003d68;[I-E]","  public static float clamp01(float value) { //[I-S]LN\u003d69;[I-E]","    return clamp(value, 0f, 1f); //[I-S]LN\u003d70;[I-E]","  } //[I-S]LN\u003d71;[I-E]"," //[I-S]LN\u003d72;[I-E]","  public static float cos(float f) { //[I-S]LN\u003d73;[I-E]","    return (float) Math.cos(f); //[I-S]LN\u003d74;[I-E]","  } //[I-S]LN\u003d75;[I-E]"," //[I-S]LN\u003d76;[I-E]","  public static float exp(float power) { //[I-S]LN\u003d77;[I-E]","    return (float) Math.exp(power); //[I-S]LN\u003d78;[I-E]","  } //[I-S]LN\u003d79;[I-E]"," //[I-S]LN\u003d80;[I-E]","  public static float floor(float f) { //[I-S]LN\u003d81;[I-E]","    return (float) Math.floor(f); //[I-S]LN\u003d82;[I-E]","  } //[I-S]LN\u003d83;[I-E]"," //[I-S]LN\u003d84;[I-E]","  public static float lerp(float a, float b, float t) { //[I-S]LN\u003d85;[I-E]","    return a + clamp01(t) * (b - a); //[I-S]LN\u003d86;[I-E]","  } //[I-S]LN\u003d87;[I-E]"," //[I-S]LN\u003d88;[I-E]","  public static float lerpUnclamped(float a, float b, float t) { //[I-S]LN\u003d89;[I-E]","    return a + t * (b - a); //[I-S]LN\u003d90;[I-E]","  } //[I-S]LN\u003d91;[I-E]"," //[I-S]LN\u003d92;[I-E]","  public static float inverseLerp(float a, float b, float value) { //[I-S]LN\u003d93;[I-E]","    return a !\u003d b ? clamp01((value - a) / (b - a)) : 0f; //[I-S]LN\u003d94;[I-E]","  } //[I-S]LN\u003d95;[I-E]"," //[I-S]LN\u003d96;[I-E]","  public static float log(float f, float base) { //[I-S]LN\u003d97;[I-E]","    return (float) (Math.log(f) / Math.log(base)); //[I-S]LN\u003d98;[I-E]","  } //[I-S]LN\u003d99;[I-E]"," //[I-S]LN\u003d100;[I-E]","  public static float log(float f) { //[I-S]LN\u003d101;[I-E]","    return (float) Math.log(f); //[I-S]LN\u003d102;[I-E]","  } //[I-S]LN\u003d103;[I-E]"," //[I-S]LN\u003d104;[I-E]","  public static float log10(float f) { //[I-S]LN\u003d105;[I-E]","    return (float) Math.log10(f); //[I-S]LN\u003d106;[I-E]","  } //[I-S]LN\u003d107;[I-E]"," //[I-S]LN\u003d108;[I-E]","  public static float max(float a, float b) { //[I-S]LN\u003d109;[I-E]","    return a \u003e b ? a : b; //[I-S]LN\u003d110;[I-E]","  } //[I-S]LN\u003d111;[I-E]"," //[I-S]LN\u003d112;[I-E]","  public static int max(int a, int b) { //[I-S]LN\u003d113;[I-E]","    return a \u003e b ? a : b; //[I-S]LN\u003d114;[I-E]","  } //[I-S]LN\u003d115;[I-E]"," //[I-S]LN\u003d116;[I-E]","  public static float min(float a, float b) { //[I-S]LN\u003d117;[I-E]","    return a \u003c b ? a : b; //[I-S]LN\u003d118;[I-E]","  } //[I-S]LN\u003d119;[I-E]"," //[I-S]LN\u003d120;[I-E]","  public static int min(int a, int b) { //[I-S]LN\u003d121;[I-E]","    return a \u003c b ? a : b; //[I-S]LN\u003d122;[I-E]","  } //[I-S]LN\u003d123;[I-E]"," //[I-S]LN\u003d124;[I-E]","  public static float pow(float f, float p) { //[I-S]LN\u003d125;[I-E]","    return (float) Math.pow(f, p); //[I-S]LN\u003d126;[I-E]","  } //[I-S]LN\u003d127;[I-E]"," //[I-S]LN\u003d128;[I-E]","  public static float repeat(float t, float length) { //[I-S]LN\u003d129;[I-E]","    return t - floor(t / length) * length; //[I-S]LN\u003d130;[I-E]","  } //[I-S]LN\u003d131;[I-E]"," //[I-S]LN\u003d132;[I-E]","  public static float round(float f) { //[I-S]LN\u003d133;[I-E]","    return (float) Math.round(f); //[I-S]LN\u003d134;[I-E]","  } //[I-S]LN\u003d135;[I-E]"," //[I-S]LN\u003d136;[I-E]","  public static int roundToInt(float f) { //[I-S]LN\u003d137;[I-E]","    return (int) Math.round(f); //[I-S]LN\u003d138;[I-E]","  } //[I-S]LN\u003d139;[I-E]"," //[I-S]LN\u003d140;[I-E]","  public static float sign(float f) { //[I-S]LN\u003d141;[I-E]","    return f \u003e\u003d 0f ? 1f : -1f; //[I-S]LN\u003d142;[I-E]","  } //[I-S]LN\u003d143;[I-E]"," //[I-S]LN\u003d144;[I-E]","  public static float sin(float f) { //[I-S]LN\u003d145;[I-E]","    return (float) Math.sin(f); //[I-S]LN\u003d146;[I-E]","  } //[I-S]LN\u003d147;[I-E]"," //[I-S]LN\u003d148;[I-E]","  public static float sqrt(float f) { //[I-S]LN\u003d149;[I-E]","    return (float) Math.sqrt(f); //[I-S]LN\u003d150;[I-E]","  } //[I-S]LN\u003d151;[I-E]"," //[I-S]LN\u003d152;[I-E]","  public static float tan(float f) { //[I-S]LN\u003d153;[I-E]","    return (float) Math.tan(f); //[I-S]LN\u003d154;[I-E]","  } //[I-S]LN\u003d155;[I-E]"," //[I-S]LN\u003d156;[I-E]","  public static float moveTowards(float current, float target, float maxDelta) { //[I-S]LN\u003d157;[I-E]","    if (abs(target - current) \u003c\u003d maxDelta) return target; //[I-S]LN\u003d158;[I-E]","    return current + sign(target - current) * maxDelta; //[I-S]LN\u003d159;[I-E]","  } //[I-S]LN\u003d160;[I-E]"," //[I-S]LN\u003d161;[I-E]","  public static float deltaAngle(float current, float target) { //[I-S]LN\u003d162;[I-E]","    float delta \u003d repeat((target - current), 360f); //[I-S]LN\u003d163;[I-E]","    if (delta \u003e 180f) delta -\u003d 360f; //[I-S]LN\u003d164;[I-E]","    return delta; //[I-S]LN\u003d165;[I-E]","  } //[I-S]LN\u003d166;[I-E]"," //[I-S]LN\u003d167;[I-E]","  public static float smoothStep(float from, float to, float t) { //[I-S]LN\u003d168;[I-E]","    t \u003d clamp01(t); //[I-S]LN\u003d169;[I-E]","    t \u003d t * t * (3f - 2f * t); //[I-S]LN\u003d170;[I-E]","    return from + (to - from) * t; //[I-S]LN\u003d171;[I-E]","  } //[I-S]LN\u003d172;[I-E]"," //[I-S]LN\u003d173;[I-E]","  public static float gamma(float value, float absmax, float gamma) { //[I-S]LN\u003d174;[I-E]","    boolean negative \u003d value \u003c 0f; //[I-S]LN\u003d175;[I-E]","    float absval \u003d abs(value); //[I-S]LN\u003d176;[I-E]","    if (absval \u003e absmax) return value; //[I-S]LN\u003d177;[I-E]","    float result \u003d (float) Math.pow(absval / absmax, gamma) * absmax; //[I-S]LN\u003d178;[I-E]","    return negative ? -result : result; //[I-S]LN\u003d179;[I-E]","  } //[I-S]LN\u003d180;[I-E]"," //[I-S]LN\u003d181;[I-E]","  public static boolean approximately(float a, float b) { //[I-S]LN\u003d182;[I-E]","    return Mathf.abs(b - a) \u003c Mathf.max(1E-06f * Mathf.max(Mathf.abs(a), Mathf.abs(b)), EPSILON); //[I-S]LN\u003d183;[I-E]","  } //[I-S]LN\u003d184;[I-E]"," //[I-S]LN\u003d185;[I-E]","  public static float pingPong(float t, float length) { //[I-S]LN\u003d186;[I-E]","    t \u003d repeat(t, length * 2f); //[I-S]LN\u003d187;[I-E]","    return length - abs(t - length); //[I-S]LN\u003d188;[I-E]","  } //[I-S]LN\u003d189;[I-E]"," //[I-S]LN\u003d190;[I-E]","  public static float nextPowerOfTwo(float f) { //[I-S]LN\u003d191;[I-E]","    int v \u003d (int) f; //[I-S]LN\u003d192;[I-E]","    v--; //[I-S]LN\u003d193;[I-E]","    v |\u003d v \u003e\u003e 1; //[I-S]LN\u003d194;[I-E]","    v |\u003d v \u003e\u003e 2; //[I-S]LN\u003d195;[I-E]","    v |\u003d v \u003e\u003e 4; //[I-S]LN\u003d196;[I-E]","    v |\u003d v \u003e\u003e 8; //[I-S]LN\u003d197;[I-E]","    v |\u003d v \u003e\u003e 16; //[I-S]LN\u003d198;[I-E]","    v++; //[I-S]LN\u003d199;[I-E]","    return v; //[I-S]LN\u003d200;[I-E]","  } //[I-S]LN\u003d201;[I-E]"," //[I-S]LN\u003d202;[I-E]","  public static boolean isPowerOfTwo(int value) { //[I-S]LN\u003d203;[I-E]","    return (value !\u003d 0) \u0026\u0026 ((value \u0026 (value - 1)) \u003d\u003d 0); //[I-S]LN\u003d204;[I-E]","  } //[I-S]LN\u003d205;[I-E]"," //[I-S]LN\u003d206;[I-E]","  public static float degToRad(float degrees) { //[I-S]LN\u003d207;[I-E]","    return degrees * DEG2RAD; //[I-S]LN\u003d208;[I-E]","  } //[I-S]LN\u003d209;[I-E]"," //[I-S]LN\u003d210;[I-E]","  public static float radToDeg(float radians) { //[I-S]LN\u003d211;[I-E]","    return radians * RAD2DEG; //[I-S]LN\u003d212;[I-E]","  } //[I-S]LN\u003d213;[I-E]"," //[I-S]LN\u003d214;[I-E]","  public static float frac(float f) { //[I-S]LN\u003d215;[I-E]","    return f - floor(f); //[I-S]LN\u003d216;[I-E]","  } //[I-S]LN\u003d217;[I-E]"," //[I-S]LN\u003d218;[I-E]","  public static int signInt(int i) { //[I-S]LN\u003d219;[I-E]","    return i \u003e\u003d 0 ? 1 : -1; //[I-S]LN\u003d220;[I-E]","  } //[I-S]LN\u003d221;[I-E]"," //[I-S]LN\u003d222;[I-E]","  public static float toRadians(float degrees) { //[I-S]LN\u003d223;[I-E]","    return (float) Math.toRadians(degrees); //[I-S]LN\u003d224;[I-E]","  } //[I-S]LN\u003d225;[I-E]"," //[I-S]LN\u003d226;[I-E]","  public static float toDegrees(float radians) { //[I-S]LN\u003d227;[I-E]","    return (float) Math.toDegrees(radians); //[I-S]LN\u003d228;[I-E]","  } //[I-S]LN\u003d229;[I-E]"," //[I-S]LN\u003d230;[I-E]","  public static float average(float... values) { //[I-S]LN\u003d231;[I-E]","    if (values.length \u003d\u003d 0) return 0f; //[I-S]LN\u003d232;[I-E]","    float sum \u003d 0f; //[I-S]LN\u003d233;[I-E]","    for (float v : values) sum +\u003d v; //[I-S]LN\u003d234;[I-E]","    return sum / values.length; //[I-S]LN\u003d235;[I-E]","  } //[I-S]LN\u003d236;[I-E]"," //[I-S]LN\u003d237;[I-E]","  public static float distance(float a, float b) { //[I-S]LN\u003d238;[I-E]","    return abs(a - b); //[I-S]LN\u003d239;[I-E]","  } //[I-S]LN\u003d240;[I-E]"," //[I-S]LN\u003d241;[I-E]","  public static float normalize(float value, float min, float max) { //[I-S]LN\u003d242;[I-E]","    return (value - min) / (max - min); //[I-S]LN\u003d243;[I-E]","  } //[I-S]LN\u003d244;[I-E]"," //[I-S]LN\u003d245;[I-E]","  public static float map(float value, float inMin, float inMax, float outMin, float outMax) { //[I-S]LN\u003d246;[I-E]","    return outMin + (outMax - outMin) * ((value - inMin) / (inMax - inMin)); //[I-S]LN\u003d247;[I-E]","  } //[I-S]LN\u003d248;[I-E]","} //[I-S]LN\u003d249;[I-E]","//C-R:Test","class Test extends Component {","   /* @Author Dhanu */ //[I-S]LN\u003d0;[I-E]","   public enum Mode { //[I-S]LN\u003d1;[I-E]","     P, //[I-S]LN\u003d2;[I-E]","     R, //[I-S]LN\u003d3;[I-E]","     S //[I-S]LN\u003d4;[I-E]","   } //[I-S]LN\u003d5;[I-E]","    //[I-S]LN\u003d6;[I-E]","   public Mode mode \u003d Mode.P; //[I-S]LN\u003d7;[I-E]","   public float time, duration; //[I-S]LN\u003d8;[I-E]","    //[I-S]LN\u003d9;[I-E]","   public Vector3 start \u003d new Vector3(); //[I-S]LN\u003d10;[I-E]","   public Vector3 end \u003d new Vector3(); //[I-S]LN\u003d11;[I-E]","   public Text3D text; //[I-S]LN\u003d12;[I-E]","    //[I-S]LN\u003d13;[I-E]","   public EasingTypes type; //[I-S]LN\u003d14;[I-E]","   public Curve curve \u003d new Curve(); //[I-S]LN\u003d15;[I-E]","    //[I-S]LN\u003d16;[I-E]","   public boolean useCurve; //[I-S]LN\u003d17;[I-E]","   /// Run only once //[I-S]LN\u003d18;[I-E]","public    void start() {} //[I-S]LN\u003d19;[I-E]","    //[I-S]LN\u003d20;[I-E]","   /// Repeat every frame //[I-S]LN\u003d21;[I-E]","public    void repeat() { //[I-S]LN\u003d22;[I-E]","     if (time \u003c duration) { //[I-S]LN\u003d23;[I-E]","       time +\u003d Math.bySecond(); //[I-S]LN\u003d24;[I-E]","     } //[I-S]LN\u003d25;[I-E]","    //[I-S]LN\u003d26;[I-E]","     float t \u003d Mathf.normalize(time / (duration), 0f, 1f); //[I-S]LN\u003d27;[I-E]","     switch (mode) { //[I-S]LN\u003d28;[I-E]","       case P: //[I-S]LN\u003d29;[I-E]","         if (useCurve) myTransform.setPosition(Easer.easeVec(start, end, t, curve)); //[I-S]LN\u003d30;[I-E]","         else myTransform.setPosition(Easer.easeVec(start, end, t, curve)); //[I-S]LN\u003d31;[I-E]","         break; //[I-S]LN\u003d32;[I-E]","       case R: //[I-S]LN\u003d33;[I-E]","         if (useCurve) myTransform.setRotation(Easer.easeQua(start, end, t, curve)); //[I-S]LN\u003d34;[I-E]","         else myTransform.setRotation(Easer.easeQua(start, end, t, type)); //[I-S]LN\u003d35;[I-E]","         break; //[I-S]LN\u003d36;[I-E]","       case S: //[I-S]LN\u003d37;[I-E]","         if (useCurve) myTransform.setScale(Easer.easeVec(start, end, t, curve)); //[I-S]LN\u003d38;[I-E]","         else myTransform.setScale(Easer.easeVec(start, end, t, type)); //[I-S]LN\u003d39;[I-E]","         break; //[I-S]LN\u003d40;[I-E]","       default: //[I-S]LN\u003d41;[I-E]","     }  //[I-S]LN\u003d42;[I-E]","    //[I-S]LN\u003d43;[I-E]","     text.setText(new String().format(\"%.2f\", time)); //[I-S]LN\u003d44;[I-E]","   } //[I-S]LN\u003d45;[I-E]","}"],"originalFileName":"_JContainer.java","referencedClasses":[],"referencesUpdatedV2":true}