{"autoCompleteData":{"varMap":{}},"compiledCode":["package JAVARuntime;","","import java.util.*; //[I-S]LN\u003d2;[I-E]","import java.text.*; //[I-S]LN\u003d3;[I-E]","import java.net.*; //[I-S]LN\u003d4;[I-E]","import java.math.*; //[I-S]LN\u003d5;[I-E]","import java.io.*; //[I-S]LN\u003d6;[I-E]","import java.nio.*; //[I-S]LN\u003d7;[I-E]","import java.nio.*; //[I-S]LN\u003d8;[I-E]","import java.util.HashMap; //[I-S]LN\u003d9;[I-E]","import java.util.Map; //[I-S]LN\u003d10;[I-E]","import java.lang.reflect.Field; //[I-S]LN\u003d12;[I-E]","import java.lang.reflect.Method; //[I-S]LN\u003d13;[I-E]","import java.lang.reflect.Modifier; //[I-S]LN\u003d14;[I-E]","import java.util.ArrayList; //[I-S]LN\u003d16;[I-E]","import java.util.List; //[I-S]LN\u003d17;[I-E]","import java.util.concurrent.*;","import java.util.concurrent.atomic.*;","import java.util.concurrent.locks.*;","import java.util.function.*;","import java.util.regex.*;","import java.util.stream.*;","import java.util.zip.*;","import java.time.*;","import java.time.chrono.*;","import java.time.format.*;","import java.time.temporal.*;","import java.time.zone.*;","","","","public class _JContainer{}","","//C-R:Test",""," //[I-S]LN\u003d1;[I-E]"," //[I-S]LN\u003d11;[I-E]"," //[I-S]LN\u003d15;[I-E]"," //[I-S]LN\u003d18;[I-E]","/* @Author Dhanu */ //[I-S]LN\u003d19;[I-E]","class Test extends Component { //[I-S]LN\u003d20;[I-E]","  /// Run only once //[I-S]LN\u003d21;[I-E]","public   void start() { //[I-S]LN\u003d22;[I-E]","    // ArrayList\u003cString\u003e arry \u003d (ArrayList\u003cString\u003e) findSub(\"JAVARuntime.SpatialObject\"); //[I-S]LN\u003d23;[I-E]","    // for (int i \u003d 0; i \u003c arry.size(); i++) { //[I-S]LN\u003d24;[I-E]","    //  Console.log(arry.get(i)); //[I-S]LN\u003d25;[I-E]","    // } //[I-S]LN\u003d26;[I-E]","    Console.log(findSub(\"JAVARuntime.Vector3\")); //[I-S]LN\u003d27;[I-E]","  } //[I-S]LN\u003d28;[I-E]"," //[I-S]LN\u003d29;[I-E]","  /// Repeat every frame //[I-S]LN\u003d30;[I-E]","public   void repeat() {} //[I-S]LN\u003d31;[I-E]"," //[I-S]LN\u003d32;[I-E]","  public static String findSub(String className) { //[I-S]LN\u003d33;[I-E]","    StringBuilder sb \u003d new StringBuilder(); //[I-S]LN\u003d34;[I-E]"," //[I-S]LN\u003d35;[I-E]","    try { //[I-S]LN\u003d36;[I-E]","      Class\u003c?\u003e cls \u003d Class.forName(className); //[I-S]LN\u003d37;[I-E]"," //[I-S]LN\u003d38;[I-E]","      sb.append(\"Class: \").append(cls.getName()).append(\"\\n\\n\"); //[I-S]LN\u003d39;[I-E]"," //[I-S]LN\u003d40;[I-E]","      // Fields including inherited //[I-S]LN\u003d41;[I-E]","      sb.append(\"FIELDS:\\n\"); //[I-S]LN\u003d42;[I-E]","      Field[] fields \u003d getAllFields(cls); //[I-S]LN\u003d43;[I-E]","      for (int i \u003d 0; i \u003c fields.length; i++) { //[I-S]LN\u003d44;[I-E]","        Field f \u003d fields[i]; //[I-S]LN\u003d45;[I-E]","        sb.append(Modifier.toString(f.getModifiers())).append(\" \").append(getSimpleClassName(f.getType().getName())).append(\" \").append(f.getName()).append(\"\\n\"); //[I-S]LN\u003d46;[I-E]","      } //[I-S]LN\u003d47;[I-E]"," //[I-S]LN\u003d48;[I-E]","      // Methods including inherited //[I-S]LN\u003d49;[I-E]","      sb.append(\"\\nMETHODS:\\n\"); //[I-S]LN\u003d50;[I-E]","      Method[] methods \u003d getAllMethods(cls); //[I-S]LN\u003d51;[I-E]","      for (int i \u003d 0; i \u003c methods.length; i++) { //[I-S]LN\u003d52;[I-E]","        Method m \u003d methods[i]; //[I-S]LN\u003d53;[I-E]","        sb.append(Modifier.toString(m.getModifiers())).append(\" \").append(getSimpleClassName(m.getReturnType().getName())).append(\" \").append(m.getName()).append(\"(\"); //[I-S]LN\u003d54;[I-E]"," //[I-S]LN\u003d55;[I-E]","        Class[] params \u003d m.getParameterTypes(); //[I-S]LN\u003d56;[I-E]","        for (int j \u003d 0; j \u003c params.length; j++) { //[I-S]LN\u003d57;[I-E]","          sb.append(getSimpleClassName(params[j].getName())); //[I-S]LN\u003d58;[I-E]","          if (j \u003c params.length - 1) sb.append(\",\"); //[I-S]LN\u003d59;[I-E]","        } //[I-S]LN\u003d60;[I-E]","        sb.append(\")\"); //[I-S]LN\u003d61;[I-E]"," //[I-S]LN\u003d62;[I-E]","        Class[] exceptions \u003d m.getExceptionTypes(); //[I-S]LN\u003d63;[I-E]","        if (exceptions.length \u003e 0) { //[I-S]LN\u003d64;[I-E]","          sb.append(\" throws \"); //[I-S]LN\u003d65;[I-E]","          for (int j \u003d 0; j \u003c exceptions.length; j++) { //[I-S]LN\u003d66;[I-E]","            sb.append(getSimpleClassName(exceptions[j].getName())); //[I-S]LN\u003d67;[I-E]","            if (j \u003c exceptions.length - 1) sb.append(\",\"); //[I-S]LN\u003d68;[I-E]","          } //[I-S]LN\u003d69;[I-E]","        } //[I-S]LN\u003d70;[I-E]"," //[I-S]LN\u003d71;[I-E]","        sb.append(\"\\n\"); //[I-S]LN\u003d72;[I-E]","      } //[I-S]LN\u003d73;[I-E]"," //[I-S]LN\u003d74;[I-E]","    } catch (Exception e) { //[I-S]LN\u003d75;[I-E]","      return \"Class not found: \" + className; //[I-S]LN\u003d76;[I-E]","    } //[I-S]LN\u003d77;[I-E]"," //[I-S]LN\u003d78;[I-E]","    return sb.toString().trim(); //[I-S]LN\u003d79;[I-E]","  } //[I-S]LN\u003d80;[I-E]"," //[I-S]LN\u003d81;[I-E]","  // Helper to get simple class name from fully qualified name //[I-S]LN\u003d82;[I-E]","  private static String getSimpleClassName(String fullName) { //[I-S]LN\u003d83;[I-E]","    int lastDot \u003d fullName.lastIndexOf(\u0027.\u0027); //[I-S]LN\u003d84;[I-E]","    if (lastDot \u003e\u003d 0) { //[I-S]LN\u003d85;[I-E]","      return fullName.substring(lastDot + 1); //[I-S]LN\u003d86;[I-E]","    } //[I-S]LN\u003d87;[I-E]","    return fullName; //[I-S]LN\u003d88;[I-E]","  } //[I-S]LN\u003d89;[I-E]"," //[I-S]LN\u003d90;[I-E]","  // Get all fields including inherited (manual array copy) //[I-S]LN\u003d91;[I-E]","  private static Field[] getAllFields(Class cls) { //[I-S]LN\u003d92;[I-E]","    if (cls \u003d\u003d null) return new Field[0]; //[I-S]LN\u003d93;[I-E]"," //[I-S]LN\u003d94;[I-E]","    Field[] own \u003d cls.getDeclaredFields(); //[I-S]LN\u003d95;[I-E]","    Field[] inherited \u003d getAllFields(cls.getSuperclass()); //[I-S]LN\u003d96;[I-E]","    Field[] combined \u003d new Field[own.length + inherited.length]; //[I-S]LN\u003d97;[I-E]"," //[I-S]LN\u003d98;[I-E]","    for (int i \u003d 0; i \u003c own.length; i++) { //[I-S]LN\u003d99;[I-E]","      combined[i] \u003d own[i]; //[I-S]LN\u003d100;[I-E]","    } //[I-S]LN\u003d101;[I-E]","    for (int i \u003d 0; i \u003c inherited.length; i++) { //[I-S]LN\u003d102;[I-E]","      combined[own.length + i] \u003d inherited[i]; //[I-S]LN\u003d103;[I-E]","    } //[I-S]LN\u003d104;[I-E]"," //[I-S]LN\u003d105;[I-E]","    return combined; //[I-S]LN\u003d106;[I-E]","  } //[I-S]LN\u003d107;[I-E]"," //[I-S]LN\u003d108;[I-E]","  // Get all methods including inherited (manual array copy) //[I-S]LN\u003d109;[I-E]","  private static Method[] getAllMethods(Class cls) { //[I-S]LN\u003d110;[I-E]","    if (cls \u003d\u003d null) return new Method[0]; //[I-S]LN\u003d111;[I-E]"," //[I-S]LN\u003d112;[I-E]","    Method[] own \u003d cls.getDeclaredMethods(); //[I-S]LN\u003d113;[I-E]","    Method[] inherited \u003d getAllMethods(cls.getSuperclass()); //[I-S]LN\u003d114;[I-E]","    Method[] combined \u003d new Method[own.length + inherited.length]; //[I-S]LN\u003d115;[I-E]"," //[I-S]LN\u003d116;[I-E]","    for (int i \u003d 0; i \u003c own.length; i++) { //[I-S]LN\u003d117;[I-E]","      combined[i] \u003d own[i]; //[I-S]LN\u003d118;[I-E]","    } //[I-S]LN\u003d119;[I-E]","    for (int i \u003d 0; i \u003c inherited.length; i++) { //[I-S]LN\u003d120;[I-E]","      combined[own.length + i] \u003d inherited[i]; //[I-S]LN\u003d121;[I-E]","    } //[I-S]LN\u003d122;[I-E]"," //[I-S]LN\u003d123;[I-E]","    return combined; //[I-S]LN\u003d124;[I-E]","  } //[I-S]LN\u003d125;[I-E]","}  //[I-S]LN\u003d126;[I-E]"],"originalFileName":"_JContainer.java","referencedClasses":[],"referencesUpdatedV2":true}