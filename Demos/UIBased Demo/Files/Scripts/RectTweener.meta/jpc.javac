
 //[I-S]LN=1;[I-E]
import java.util.*; //[I-S]LN=2;[I-E]
import java.text.*; //[I-S]LN=3;[I-E]
import java.net.*; //[I-S]LN=4;[I-E]
import java.math.*; //[I-S]LN=5;[I-E]
import java.io.*; //[I-S]LN=6;[I-E]
import java.nio.*; //[I-S]LN=7;[I-E]
import java.nio.*; //[I-S]LN=8;[I-E]
import java.util.HashMap; //[I-S]LN=9;[I-E]
import java.util.Map; //[I-S]LN=10;[I-E]
 //[I-S]LN=11;[I-E]
/* @Author Dhanu */ //[I-S]LN=12;[I-E]
class RectTweener extends Component { //[I-S]LN=13;[I-E]
  public EasingTypes easeType = EasingTypes.Linear; //[I-S]LN=14;[I-E]
 //[I-S]LN=15;[I-E]
  @AutoWired @Hide public UIRect rect; //[I-S]LN=16;[I-E]
 //[I-S]LN=17;[I-E]
  public Vector2 start = new Vector2(); //[I-S]LN=18;[I-E]
  public Vector2 end = new Vector2(); //[I-S]LN=19;[I-E]
 //[I-S]LN=20;[I-E]
  public float time; //[I-S]LN=21;[I-E]
  public float duration; //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  public boolean useCurve; //[I-S]LN=24;[I-E]
  public Curve curve = new Curve(); //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
  /// Run only once //[I-S]LN=27;[I-E]
  void start() {} //[I-S]LN=28;[I-E]
 //[I-S]LN=29;[I-E]
  /// Repeat every frame //[I-S]LN=30;[I-E]
  void repeat() { //[I-S]LN=31;[I-E]
 //[I-S]LN=32;[I-E]
    if (time < duration) { //[I-S]LN=33;[I-E]
      time += Math.bySecond(); //[I-S]LN=34;[I-E]
    }  //[I-S]LN=35;[I-E]
     //[I-S]LN=36;[I-E]
    float t = Mathf.normalize(time / duration, 0f, 1f); //[I-S]LN=37;[I-E]
    if (!useCurve) setRectPos(Easer.easeVec(start, end, t, easeType), rect); //[I-S]LN=38;[I-E]
    else setRectPos(Easer.easeVec(start, end, t, curve), rect); //[I-S]LN=39;[I-E]
  } //[I-S]LN=40;[I-E]
 //[I-S]LN=41;[I-E]
  public void setRectPos(Vector2 vec, UIRect _rect) { //[I-S]LN=42;[I-E]
    _rect.setJRPositionX((int) vec.getX()); //[I-S]LN=43;[I-E]
    _rect.setJRPositionY((int) vec.getY()); //[I-S]LN=44;[I-E]
  } //[I-S]LN=45;[I-E]
} //[I-S]LN=46;[I-E]